{"version":3,"sources":["../src/util/fetch.ts","../src/util/constants.ts","../src/util/urls.ts","../src/rest/types/api.ts","../src/rest/types/channels.ts","../src/rest/types/registry.ts","../src/rest/types/ignite.ts","../src/rest/types/pipe.ts","../src/rest/types/projects.ts","../src/rest/types/users.ts","../src/rest/client.ts","../src/sdks/channels.ts","../src/sdks/create.ts","../src/sdks/ignite.ts","../src/util/size.ts","../src/sdks/pipe.ts","../src/sdks/projects.ts","../src/sdks/registry.ts","../src/sdks/users.ts","../src/hop.ts","../src/permissions.ts"],"sourcesContent":["import * as ponyfill from 'cross-fetch';\n\nexport const HAS_NATIVE_FETCH = typeof globalThis.fetch !== 'undefined';\n\nexport const fetch = HAS_NATIVE_FETCH ? globalThis.fetch : ponyfill.default;\nexport const Headers = HAS_NATIVE_FETCH ? globalThis.Headers : ponyfill.Headers;\nexport const Request = HAS_NATIVE_FETCH ? globalThis.Request : ponyfill.Request;\nexport const Response = HAS_NATIVE_FETCH\n\t? globalThis.Response\n\t: ponyfill.Response;\n","/**\n * The default base URL for Hop's API.\n */\nexport const DEFAULT_BASE_URL = 'https://api.hop.io';\n\n/**\n * If we are in the browser.\n */\nexport const IS_BROWSER = typeof window !== 'undefined';\n","import {ExtractRouteParams, Query} from '../rest/index.js';\n\nexport function lead(x: string) {\n\treturn x.charCodeAt(0) === 47 ? x : '/' + x;\n}\n\nexport function isObjectEmpty(object: object) {\n\tfor (const _ in object) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport function join(a: string, b: string) {\n\treturn a + lead(b);\n}\n\n/**\n * Generates a querystring to append to a URL. This function will include the ? character.\n * @param query An object of query params to be encoded\n * @returns A string of query params\n */\nexport function querystring(query: Query<string>): string {\n\tconst usefulQuery = Object.entries(query).filter(\n\t\t(entry): entry is [string, string | number] => {\n\t\t\tconst [, value] = entry;\n\n\t\t\treturn value !== undefined;\n\t\t},\n\t);\n\n\tif (usefulQuery.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst INITIAL_QUERYSTRING = '?';\n\n\treturn usefulQuery.reduce((acc, [key, value]) => {\n\t\tif (value === undefined) {\n\t\t\treturn acc;\n\t\t}\n\n\t\tconst result = `${key}=${value.toString()}`;\n\n\t\tif (acc === INITIAL_QUERYSTRING) {\n\t\t\treturn INITIAL_QUERYSTRING + result;\n\t\t}\n\n\t\treturn acc + '&' + result;\n\t}, INITIAL_QUERYSTRING);\n}\n\nexport function createURLBuilder(base: string) {\n\tconst regex = /:[^/?#]+/g;\n\n\treturn <Path extends string>(path: Path, query: Query<Path>) => {\n\t\tquery = {...query};\n\n\t\tconst urlWithParams = path.replace(regex, param => {\n\t\t\tparam = param.substring(1);\n\n\t\t\tif (param in query) {\n\t\t\t\tconst {[param]: value, ...rest} = query;\n\t\t\t\tquery = rest as ExtractRouteParams<Path>;\n\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\tthrow new Error(`URL param ${param} is undefined`);\n\t\t\t\t}\n\n\t\t\t\tif (typeof value === 'number') {\n\t\t\t\t\treturn value.toString();\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tthrow new Error(`Missing param ${param}.`);\n\t\t});\n\n\t\tconst urlWithSearch = isObjectEmpty(query)\n\t\t\t? urlWithParams\n\t\t\t: `${urlWithParams}${querystring(query as Query<string>)}`;\n\n\t\treturn join(base, urlWithSearch);\n\t};\n}\n","export * as Channels from './channels.js';\nexport * as Registry from './registry.js';\nexport * as Ignite from './ignite.js';\nexport * as Pipe from './pipe.js';\nexport * as Projects from './projects.js';\nexport * as Users from './users.js';\n","import {Endpoint} from '../endpoints.js';\nimport {Project} from './projects.js';\nimport {Empty, Id, Timestamp} from '../../util/types.js';\n\nexport enum ChannelType {\n\tPRIVATE = 'private',\n\tPUBLIC = 'public',\n\tUNPROTECTED = 'unprotected',\n}\n\nexport type State = Record<string, unknown>;\n\nexport interface Channel {\n\t/**\n\t * The ID of the channel\n\t */\n\tid: string;\n\n\t/**\n\t * The project it is associated with\n\t */\n\tproject: Project;\n\n\t/**\n\t * State metadata\n\t */\n\tstate: State;\n\n\t/**\n\t * Capabilities of the channel\n\t */\n\tcapabilities: number;\n\n\t/**\n\t * When this channel was created\n\t */\n\tcreated_at: Timestamp;\n\n\t/**\n\t * The type of this channel\n\t */\n\ttype: ChannelType;\n}\n\nexport interface ChannelToken {\n\t/**\n\t * The ID for the token\n\t */\n\tid: Id<'leap_token'>;\n\n\t/**\n\t * State for this token\n\t */\n\tstate: State;\n\n\t/**\n\t * The project this channel token is associated with\n\t */\n\tproject_id: Id<'project'>;\n}\n\nexport type ChannelEndpoints =\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/channels',\n\t\t\t{channel: Channel},\n\t\t\t{type: ChannelType; state: Record<string, any> | null}\n\t  >\n\t| Endpoint<\n\t\t\t'PUT',\n\t\t\t'/v1/channels/:channel_id',\n\t\t\t{channel: Channel},\n\t\t\t{type: ChannelType; state: Record<string, any> | null}\n\t  >\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/channels/tokens',\n\t\t\t{token: ChannelToken},\n\t\t\t{state: State}\n\t  >\n\t| Endpoint<'DELETE', '/v1/channels/:channel_id', Empty>\n\t| Endpoint<'GET', '/v1/channels/:channel_id', {channel: Channel}>\n\t| Endpoint<'GET', '/v1/channels/:channel_id/tokens', {tokens: ChannelToken[]}>\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/channels/tokens/:token/messages',\n\t\t\tEmpty,\n\t\t\t{e: string; d: unknown}\n\t  >\n\t| Endpoint<'PUT', '/v1/channels/:channel_id/subscribers/:token', Empty>\n\t| Endpoint<'PATCH', '/v1/channels/:channel_id/state', Empty, State>\n\t| Endpoint<'PUT', '/v1/channels/:channel_id/state', Empty, State>\n\t| Endpoint<'GET', '/v1/channels/:channel_id/state', {state: State}>\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/channels/:channel_id/messages',\n\t\t\tEmpty,\n\t\t\t{e: string; d: unknown}\n\t  >\n\t| Endpoint<'GET', '/v1/channels', {channels: Channel[]}>\n\t| Endpoint<'GET', '/v1/channels/tokens/:token_id', {token: ChannelToken}>;\n","import {Endpoint} from '../endpoints.js';\nimport {Empty} from '../../util/types.js';\n\nexport type RegistryEndpoints =\n\t| Endpoint<'DELETE', '/v1/registry/images/:image', Empty>\n\t| Endpoint<'GET', '/v1/registry/images', {images: string[]}>\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/registry/images/:image/manifests',\n\t\t\t{\n\t\t\t\tmanifests: {\n\t\t\t\t\tdigest: {\n\t\t\t\t\t\tdigest: string;\n\t\t\t\t\t\tsize: number;\n\t\t\t\t\t\tuploaded: string;\n\t\t\t\t\t};\n\t\t\t\t\ttag: string | null;\n\t\t\t\t}[];\n\t\t\t}\n\t  >;\n","import {ByteString} from '../../util/index.js';\nimport {Endpoint} from '../endpoints.js';\nimport {\n\tEmpty,\n\tHopShDomain,\n\tId,\n\tInternalHopDomain,\n\tTimestamp,\n} from '../../util/types.js';\n\nexport enum Regions {\n\tUS_EAST_1 = 'us-east-1',\n}\n\n/**\n * Runtime types are used to describe the type of a deployment or container\n */\nexport enum RuntimeType {\n\t/**\n\t * Ephemeral deployments/containers are sort of fire and forget. Containers won't restart if they exit but they can still be terminated programatically.\n\t */\n\tEPHEMERAL = 'ephemeral',\n\n\t/**\n\t * Persistent deployments/containers will restart if they exit. They can also be started and stopped programmatically.\n\t */\n\tPERSISTENT = 'persistent',\n}\n\n/**\n * Container state is relatively self-explanatory. It describes what the container is currently doing.\n */\nexport enum ContainerState {\n\t/**\n\t * The container is pending creation\n\t */\n\tPENDING = 'pending',\n\n\t/**\n\t * The container is running\n\t */\n\tRUNNING = 'running',\n\n\t/**\n\t * The container is stopped\n\t */\n\tSTOPPED = 'stopped',\n\n\t/**\n\t * The container's entrypoint failed (e.g. exited with a non-zero exit code)\n\t */\n\tFAILED = 'failed',\n\n\t/**\n\t * The container is being deleted\n\t */\n\tTERMINATING = 'terminating',\n\n\t/**\n\t * The container exited (e.g. with a zero exit code)\n\t */\n\tEXITED = 'exited',\n}\n\n/**\n * Types for supported GPU\n */\nexport enum VgpuType {\n\tA400 = 'a400',\n}\n\nexport interface Container {\n\t/**\n\t * The ID of the container\n\t */\n\tid: Id<'container'>;\n\n\t/**\n\t * The time this container was created\n\t */\n\tcreated_at: Timestamp;\n\n\t/**\n\t * The region this container runs in\n\t */\n\tregion: Regions;\n\n\t/**\n\t * Information about uptime/downtime for this container\n\t */\n\tuptime: {\n\t\t/**\n\t\t * The last time this container was started at\n\t\t */\n\t\tlast_start: Timestamp;\n\t};\n\n\t/**\n\t * The type of this container\n\t */\n\ttype: RuntimeType;\n\n\t/**\n\t * The internal IP of the container\n\t */\n\tinternal_ip: string;\n\n\t/**\n\t * The ID of the deployment this container is associated with\n\t */\n\tdeployment_id: Id<'deployment'>;\n\n\t/**\n\t * The state this container is in\n\t */\n\tstate: ContainerState;\n}\n\nexport interface Deployment {\n\t/**\n\t * The ID of the deployment\n\t */\n\tid: Id<'deployment'>;\n\n\t/**\n\t * The name of the deployment\n\t */\n\tname: string;\n\n\t/**\n\t * The amount of containers this deployment is currently running\n\t */\n\tcontainer_count: number;\n\n\t/**\n\t * The time this deployment was created at\n\t */\n\tcreated_at: Timestamp;\n\n\t/**\n\t * The config for this deployment\n\t */\n\tconfig: DeploymentConfig;\n}\n\n// This is a type not an interface so we can make a union\n// when future versions of deployment configs come out\nexport type DeploymentConfig = {\n\t/**\n\t * The name of the deployment\n\t */\n\tname: string;\n\n\t/**\n\t * The strategy for scaling multiple containers.\n\t *\n\t * Manual = add containers yourself\n\t *\n\t * @warning This property is not yet fully complete\n\t */\n\tcontainer_strategy: 'manual';\n\n\t/**\n\t * The type of this deployment\n\t */\n\ttype: RuntimeType;\n\n\t/**\n\t * The version of this config\n\t */\n\tversion: '2022-05-17';\n\n\t/**\n\t * The docker image config for this deployment\n\t */\n\timage: Image;\n\n\t/**\n\t * Environment variables for this deployment\n\t */\n\tenv: Record<string, string>;\n\n\t/**\n\t * Resources allocated to this deployment\n\t */\n\tresources: Resources;\n};\n\n/**\n * Docker image config\n */\nexport interface Image {\n\t/**\n\t * The name of the docker image\n\t */\n\tname: string | null;\n\n\t/**\n\t * Authorization required for the registry to access this image\n\t * This is not required if you use Hop's own registry.\n\t */\n\tauth: Auth | null;\n\n\t/**\n\t * GitHub repo information (if applicable)\n\t */\n\tgh_repo: ImageGHRepo | null;\n}\n\n/**\n * Docker image registry authorization\n */\nexport interface Auth {\n\tusername: string;\n\tpassword: string;\n}\n\n/**\n * GitHub repo type sent from API (NOT USED IN IMAGES)\n */\nexport interface GHRepo {\n\tid: number;\n\tfull_name: string;\n\tprivate: boolean;\n\tdefault_branch: string;\n\taccount_name: string;\n}\n\n/**\n * GitHub repo partial used for images\n */\nexport interface ImageGHRepo {\n\trepo_id: number;\n\tfull_name: string;\n\tbranch: string;\n}\n\n/**\n * Resources allocated to a deployment\n */\nexport interface Resources {\n\t/**\n\t * Amount of vCPU to allocate\n\t */\n\tvcpu: number;\n\n\t/**\n\t * Amount of memory to allocate in a readible format\n\t * You can use the `parseSize` function to convert this to bytes.\n\t */\n\tram: ByteString;\n\n\t/**\n\t * vGPUs to allocate\n\t */\n\tvgpu: Vgpu[];\n}\n\n/**\n * Virtual GPU config\n */\nexport interface Vgpu {\n\t/**\n\t * The type of vGPU to allocate\n\t */\n\ttype: VgpuType;\n\n\t/**\n\t * The amount of vGPUs to allocate\n\t */\n\tcount: number;\n}\n\n/**\n * Logs from a container\n */\nexport interface ContainerLog {\n\t/**\n\t * The timestamp of the log\n\t */\n\ttimestamp: Timestamp;\n\n\t/**\n\t * The log message\n\t */\n\tmessage: string;\n\n\t/**\n\t * The ID of the document in elasticsearch. You probably won't have to use this, but\n\t * it might be useful for React keys, for example, as they are unique.\n\t */\n\tnonce: string;\n\n\t/**\n\t * The level of the log. stdout becomes `info`\n\t */\n\tlevel: 'info' | 'stderr';\n}\n\n/**\n * Types of gateways supported by Hop\n */\nexport enum GatewayType {\n\t/**\n\t * The gateway can only be accessed inside of a project's network\n\t */\n\tINTERNAL = 'internal',\n\n\t/**\n\t * The gateway can be accessed from the internet\n\t */\n\tEXTERNAL = 'external',\n}\n\n/**\n * Gateways are used to connect services to the internet or a private network\n */\nexport interface Gateway {\n\t/**\n\t * The ID of the gateway\n\t */\n\tid: Id<'gateway'>;\n\n\t/**\n\t * The type of the gateway\n\t */\n\ttype: GatewayType;\n\n\t/**\n\t * The name of the gateway\n\t */\n\tname: string;\n\n\t/**\n\t * The protocol for this gateway (Only for external)\n\t *\n\t * @warning Currently, hop only supports HTTP. This will eventually change to an enum\n\t */\n\tprotocol: 'http' | null;\n\n\t/**\n\t * The deployment this gateway is associated with\n\t */\n\tdeployment_id: Id<'deployment'>;\n\n\t/**\n\t * The date this gateway was created\n\t */\n\tcreated_at: Timestamp;\n\n\t/**\n\t * Domain automatically assigned by Hop\n\t */\n\thopsh_domain: HopShDomain | null;\n\n\t/**\n\t * Internal domain assigned by user upon gateway creation\n\t */\n\tinternal_domain: InternalHopDomain | null;\n\n\t/**\n\t * Port the Gateway targets (Only for external gateways)\n\t */\n\ttarget_port: number | null;\n\n\t/**\n\t * Domains associated with this gateway\n\t */\n\tdomains: Domain[];\n}\n\nexport enum DomainState {\n\tPENDING = 'pending',\n\tVALID_CNAME = 'valid_cname',\n\tSSL_ACTIVE = 'ssl_active',\n}\n\nexport interface Domain {\n\t/**\n\t * The ID of the domain\n\t */\n\tid: Id<'domain'>;\n\n\t/**\n\t * The domain name\n\t */\n\tdomain: string;\n\n\t/**\n\t * The domain state\n\t */\n\tstate: DomainState;\n\n\t/**\n\t * The date this domain was created\n\t */\n\tcreated_at: Timestamp;\n}\n\nexport type IgniteEndpoints =\n\t| Endpoint<'GET', '/v1/ignite/deployments', {deployments: Deployment[]}>\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/ignite/deployments/:deployment_id/containers',\n\t\t\t{containers: Container[]}\n\t  >\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/ignite/deployments/:deployment_id/containers',\n\t\t\t{container: Container}\n\t  >\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/ignite/deployments/:deployment_id/containers/:container_id',\n\t\t\tnever,\n\t\t\t{\n\t\t\t\t/**\n\t\t\t\t * The ID of the deployment\n\t\t\t\t */\n\t\t\t\tdeployment_id: Id<'deployment'>;\n\n\t\t\t\t/**\n\t\t\t\t * The ID of the container\n\t\t\t\t */\n\t\t\t\tcontainer_id: Id<'container'>;\n\t\t\t}\n\t  >\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/ignite/deployments',\n\t\t\t{deployment: Deployment},\n\t\t\tDeploymentConfig\n\t  >\n\t| Endpoint<'DELETE', '/v1/ignite/deployments/:deployment_id', Empty>\n\t| Endpoint<'DELETE', '/v1/ignite/containers/:container_id', Empty>\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/ignite/containers/:container_id/logs',\n\t\t\t{logs: ContainerLog[]}\n\t  >\n\t| Endpoint<'GET', '/v1/ignite/deployments/search', {deployment: Deployment}>\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/ignite/deployments/:deployment_id',\n\t\t\t{deployment: Deployment}\n\t  >\n\t| Endpoint<\n\t\t\t'PUT',\n\t\t\t'/v1/ignite/containers/:container_id/state',\n\t\t\tEmpty,\n\t\t\t{\n\t\t\t\t/**\n\t\t\t\t * The state to update the container to\n\t\t\t\t */\n\t\t\t\tpreferred_state: ContainerState.STOPPED | ContainerState.RUNNING;\n\t\t\t}\n\t  >\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/ignite/gateways/:gateway_id/domains',\n\t\t\tEmpty,\n\t\t\t{domain: string}\n\t  >\n\t| Endpoint<'GET', '/v1/ignite/gateways/:gateway_id', {gateway: Gateway}>\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/ignite/deployments/:deployment_id/gateways',\n\t\t\t{gateways: Gateway[]}\n\t  >\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/ignite/deployments/:deployment_id/gateways',\n\t\t\t{gateway: Gateway},\n\t\t\t{type: GatewayType; listening_port: number; protocol: Gateway['protocol']}\n\t  >;\n","import {Endpoint} from '../endpoints.js';\nimport {Regions} from './ignite.js';\nimport {Empty, Id, Timestamp} from '../../util/types.js';\n\nexport type DeliveryProtocol = 'webrtc' | 'hls';\n\nexport interface Room {\n\t/**\n\t * The ID of this stream\n\t */\n\tid: Id<'pipe_room'>;\n\n\t/**\n\t * The name of this room\n\t */\n\tname: string;\n\n\t/**\n\t * The unix timestamp of when this stream was created\n\t */\n\tcreated_at: Timestamp;\n\n\t/**\n\t * Protocol you can stream with\n\t */\n\tingest_protocol: 'rtmp';\n\n\t/**\n\t * Protocols that are supported by this room to the client\n\t */\n\tdelivery_protocols: DeliveryProtocol[];\n\n\t/**\n\t * A join token to subscribe into this room\n\t */\n\tjoin_token: string;\n\n\t/**\n\t * The region that the stream url is located in\n\t */\n\tingest_region: Regions;\n\n\t/**\n\t * The URL that you can stream to\n\t */\n\tingest_endpoint: string;\n\n\t/**\n\t * The state of the stream currently\n\t */\n\tstate: 'live' | 'offline';\n}\n\nexport type PipeEndpoints =\n\t| Endpoint<'GET', '/v1/pipe/rooms', {rooms: Room[]}>\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/pipe/rooms',\n\t\t\t{room: Room},\n\t\t\t{\n\t\t\t\t/**\n\t\t\t\t * The name of the stream\n\t\t\t\t */\n\t\t\t\tname: string;\n\n\t\t\t\tingest_protocol: 'rtmp' | 'rtp';\n\n\t\t\t\tdelivery_protocols: DeliveryProtocol[];\n\n\t\t\t\tregion: Regions;\n\n\t\t\t\tephemeral: boolean;\n\n\t\t\t\tllhls_config?: {\n\t\t\t\t\twcl_delay: number;\n\t\t\t\t\tartificial_delay: number;\n\t\t\t\t\tmax_playout_bitrate_preset: string;\n\t\t\t\t};\n\t\t\t}\n\t  >\n\t| Endpoint<'DELETE', '/v1/pipe/rooms/:room_id', Empty>;\n","import {Endpoint} from '../endpoints.js';\nimport {Empty, Id, Timestamp} from '../../util/types.js';\nimport {User} from './users.js';\n\nexport type Member = Omit<User, 'email' | 'id'> & {\n\t/**\n\t * The ID of the project member\n\t */\n\tid: Id<'pm'>;\n\n\t/**\n\t * The role that this member has in a project\n\t */\n\trole: MemberRole;\n\n\t/**\n\t * The date that this member joined the project\n\t */\n\tjoined_at: Timestamp;\n};\n\nexport enum ProjectTier {\n\tFREE = 'free',\n\tPAID = 'paid',\n}\n\nexport interface MemberRole {\n\t/**\n\t * The ID of the role\n\t */\n\tid: Id<'role'>;\n\n\t/**\n\t * The name of the role\n\t */\n\tname: string;\n\n\t/**\n\t * The flags for this role\n\t */\n\tflags: number;\n}\n\n/**\n * A project token for a project\n */\nexport interface ProjectToken {\n\t/**\n\t * The Id of the project token\n\t */\n\tid: Id<'ptkid'>;\n\n\t/**\n\t * The key value. This will likely have half of the key obfuscated\n\t */\n\ttoken: Id<'ptk'>;\n\n\t/**\n\t * The time this project token was created\n\t */\n\tcreated_at: Timestamp;\n\n\t/**\n\t * Permissions and flags that this project token can perform\n\t */\n\tflags: number;\n}\n\n/**\n * Type of a project\n */\nexport enum ProjectType {\n\t/**\n\t * A regular project is\n\t */\n\tREGULAR = 'regular',\n\n\t/**\n\t * A personal project are created when you register an account\n\t */\n\tPERSONAL = 'personal',\n}\n\nexport interface Project {\n\t/**\n\t * The ID of the project\n\t */\n\tid: Id<'project'>;\n\n\t/**\n\t * The name of the project\n\t */\n\tname: string;\n\n\t/**\n\t * The tier this project is\n\t */\n\ttier: ProjectTier;\n\n\t/**\n\t * The time this project was created at\n\t */\n\tcreated_at: Timestamp;\n\n\t/**\n\t * An icon for this project\n\t */\n\ticon: string | null;\n\n\t/**\n\t * The registry namespace for this project\n\t */\n\tnamespace: string;\n\n\t/**\n\t * The type of this project. Either regular or personal\n\t */\n\ttype: ProjectType;\n\n\tdefault_quotas: DefaultQuotas;\n\n\tquota_overrides: QuotaOverrides;\n\n\tquota_usage: QuotaUsage;\n}\n\nexport interface DefaultQuotas {\n\tvcpu: number;\n\tram: number;\n}\n\nexport interface QuotaOverrides {}\n\nexport interface QuotaUsage {\n\tvcpu: number;\n\tram: number;\n}\n\nexport interface Secret {\n\t/**\n\t * The ID of the secret\n\t */\n\tid: Id<'secret'>;\n\n\t/**\n\t * The name of the secret\n\t */\n\tname: string;\n\n\t/**\n\t * A digest hash of the secret\n\t */\n\tdigest: string;\n\n\t/**\n\t * The time this secret was created at\n\t */\n\tcreated_at: Timestamp;\n}\n\nexport type ProjectsEndpoints =\n\t| Endpoint<\n\t\t\t'DELETE',\n\t\t\t'/v1/projects/:project_id/tokens/:project_token_id',\n\t\t\tEmpty\n\t  >\n\t| Endpoint<'DELETE', '/v1/projects/@this/tokens/:project_token_id', Empty>\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/projects/:project_id/members/@me',\n\t\t\t{project_member: Member}\n\t  >\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/projects/:project_id/tokens',\n\t\t\t{project_tokens: ProjectToken[]}\n\t  >\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/projects/@this/tokens',\n\t\t\t{project_tokens: ProjectToken[]}\n\t  >\n\t| Endpoint<'GET', '/v1/projects/:project_id/members', {members: Member[]}>\n\t| Endpoint<'GET', '/v1/projects/@this/members', {members: Member[]}>\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/projects/:project_id/tokens',\n\t\t\t{project_token: ProjectToken & {project: Project}},\n\t\t\t{flags: number}\n\t  >\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/projects/@this/tokens',\n\t\t\t{project_token: ProjectToken & {project: Project}},\n\t\t\t{flags: number}\n\t  >\n\t| Endpoint<\n\t\t\t'PUT',\n\t\t\t'/v1/projects/:project_id/secrets/:name',\n\t\t\t{secret: Secret},\n\t\t\tstring\n\t  >\n\t| Endpoint<\n\t\t\t'PUT',\n\t\t\t'/v1/projects/@this/secrets/:name',\n\t\t\t{secret: Secret},\n\t\t\tstring\n\t  >\n\t| Endpoint<'GET', '/v1/projects/:project_id/secrets', {secrets: Secret[]}>\n\t| Endpoint<'GET', '/v1/projects/@this/secrets', {secrets: Secret[]}>\n\t| Endpoint<'DELETE', '/v1/projects/:project_id/secrets/:secret_id', Empty>\n\t| Endpoint<'DELETE', '/v1/projects/@this/secrets/:secret_id', Empty>;\n","import {Endpoint} from '../endpoints.js';\nimport {MemberRole, Project} from './projects.js';\nimport {Empty, Id, Timestamp} from '../../util/types.js';\n\n/**\n * A user objct\n */\nexport interface User {\n\t/**\n\t * The ID of the user\n\t */\n\tid: Id<'user'>;\n\n\t/**\n\t * The name of the user. Think of this as a display name\n\t */\n\tname: string;\n\n\t/**\n\t * A unqiue username for the user\n\t */\n\tusername: string;\n\n\t/**\n\t * The email of the user\n\t */\n\temail: string;\n}\n\nexport interface PAT {\n\t/**\n\t * The ID of the pat\n\t */\n\tid: Id<'pat'>;\n\n\t/**\n\t * The name of the pat\n\t */\n\tname: string | null;\n\n\t/**\n\t * The pat token\n\t *\n\t * @warning This value will be partially censored if it\n\t */\n\tpat: string;\n\n\t/**\n\t * The date the pat was created\n\t */\n\tcreated_at: Timestamp;\n}\n\nexport type UserEndpoints =\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/users/@me',\n\t\t\t{\n\t\t\t\tprojects: Project[];\n\t\t\t\tuser: User;\n\t\t\t\tproject_member_role_map: Record<Id<'project'>, MemberRole>;\n\t\t\t\tleap_token: string | null;\n\t\t\t}\n\t  >\n\t| Endpoint<'POST', '/v1/users/@me/pats', {pat: PAT}, {name: string}>\n\t| Endpoint<'GET', '/v1/users/@me/pats', {pats: PAT[]}>\n\t| Endpoint<'DELETE', '/v1/users/@me/pats/:pat_id', Empty>;\n","import {fetch, Headers, Request, Response} from '../util/fetch.js';\nimport {ExtractRouteParams} from '../util/index.js';\nimport {IS_BROWSER} from '../util/constants.js';\nimport {createURLBuilder} from '../util/urls.js';\nimport {APIResponse, Endpoints, ErroredAPIResponse} from './endpoints.js';\nimport {getIdPrefix, Id, Method} from './types/index.js';\n\nexport type APIAuthentication = Id<'ptk'> | Id<'bearer'> | Id<'pat'>;\n\nexport type APIAuthenticationType = APIAuthentication extends Id<infer T>\n\t? T\n\t: never;\n\nexport function validateAPIAuthentication(\n\tauth: string,\n): auth is APIAuthenticationType {\n\treturn auth === 'bearer' || auth === 'pat' || auth === 'ptk';\n}\n\nexport interface APIClientOptions {\n\treadonly baseUrl: string;\n\treadonly authentication: APIAuthentication;\n}\n\nexport class HopAPIError extends Error {\n\tpublic readonly status: number;\n\n\tconstructor(\n\t\tpublic readonly request: Request,\n\t\tpublic readonly response: Response,\n\t\tpublic readonly data: ErroredAPIResponse,\n\t) {\n\t\tsuper(data.error.message);\n\n\t\tthis.status = response.status;\n\t}\n}\n\nexport type Query<Path extends string> = ExtractRouteParams<Path> &\n\tRecord<string, string | number | undefined>;\n\nexport class APIClient {\n\tpublic static getAuthType(auth: APIAuthentication) {\n\t\tconst prefix = getIdPrefix(auth);\n\n\t\tif (!validateAPIAuthentication(prefix)) {\n\t\t\tthrow new Error(`Invalid authentication type: ${prefix}`);\n\t\t}\n\n\t\treturn prefix;\n\t}\n\n\tprivate readonly options;\n\n\tpublic readonly authType;\n\tpublic readonly url;\n\n\tconstructor(options: APIClientOptions) {\n\t\tthis.options = options;\n\t\tthis.authType = APIClient.getAuthType(options.authentication);\n\t\tthis.url = createURLBuilder(options.baseUrl);\n\t}\n\n\tasync get<Path extends Extract<Endpoints, {method: 'GET'}>['path']>(\n\t\tpath: Path,\n\t\tquery: Query<Path>,\n\t\tinit?: RequestInit,\n\t) {\n\t\treturn this.request<Extract<Endpoints, {path: Path; method: 'GET'}>['res']>(\n\t\t\t'GET',\n\t\t\tpath,\n\t\t\tundefined,\n\t\t\tquery,\n\t\t\tinit,\n\t\t);\n\t}\n\n\tpost<Path extends Extract<Endpoints, {method: 'POST'}>['path']>(\n\t\tpath: Path,\n\t\tbody: Extract<Endpoints, {path: Path; method: 'POST'}>['body'],\n\t\tquery: Query<Path>,\n\t\tinit?: RequestInit,\n\t) {\n\t\treturn this.request<\n\t\t\tExtract<Endpoints, {path: Path; method: 'POST'}>['res']\n\t\t>('POST', path, body, query, init);\n\t}\n\n\tput<Path extends Extract<Endpoints, {method: 'PUT'}>['path']>(\n\t\tpath: Path,\n\t\tbody: Extract<Endpoints, {path: Path; method: 'PUT'}>['body'],\n\t\tquery: Query<Path>,\n\t\tinit?: RequestInit,\n\t) {\n\t\treturn this.request<Extract<Endpoints, {path: Path; method: 'PUT'}>['res']>(\n\t\t\t'PUT',\n\t\t\tpath,\n\t\t\tbody,\n\t\t\tquery,\n\t\t\tinit,\n\t\t);\n\t}\n\n\tpatch<Path extends Extract<Endpoints, {method: 'PATCH'}>['path']>(\n\t\tpath: Path,\n\t\tbody: Extract<Endpoints, {path: Path; method: 'PATCH'}>['body'],\n\t\tquery: Query<Path>,\n\t\tinit?: RequestInit,\n\t) {\n\t\treturn this.request<\n\t\t\tExtract<Endpoints, {path: Path; method: 'PATCH'}>['res']\n\t\t>('PATCH', path, body, query, init);\n\t}\n\n\tdelete<Path extends Extract<Endpoints, {method: 'DELETE'}>['path']>(\n\t\tpath: Path,\n\t\tbody: Extract<Endpoints, {path: Path; method: 'DELETE'}>['body'],\n\t\tquery: Query<Path>,\n\t\tinit?: RequestInit,\n\t) {\n\t\treturn this.request<\n\t\t\tExtract<Endpoints, {path: Path; method: 'DELETE'}>['res']\n\t\t>('DELETE', path, body, query, init);\n\t}\n\n\tasync raw<T>(request: Request) {\n\t\trequest.headers.set('Authorization', this.options.authentication);\n\n\t\tif (!IS_BROWSER) {\n\t\t\trequest.headers.set('User-Agent', 'Hop-API-Client');\n\t\t}\n\n\t\treturn this.parseResponse<T>(request, await fetch(request));\n\t}\n\n\tprivate async parseResponse<T>(\n\t\trequest: Request,\n\t\tresponse: Response,\n\t): Promise<T> {\n\t\tif (\n\t\t\tresponse.status === 204 ||\n\t\t\t!response.headers.get('Content-Type')?.includes('application/json')\n\t\t) {\n\t\t\t// Probably a DELETE request with no body returned, so return undefined here\n\t\t\t// This cast is (prolly) safe because endpoints that return nothing\n\t\t\t// are typed as `Empty`\n\t\t\treturn undefined as unknown as T;\n\t\t}\n\n\t\tconst result = await (response.json() as Promise<APIResponse<T>>).catch(\n\t\t\t(error: Error): ErroredAPIResponse => {\n\t\t\t\treturn {\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: 'local_client_error',\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t},\n\t\t);\n\n\t\tif (!result.success) {\n\t\t\tthrow new HopAPIError(request, response, result);\n\t\t}\n\n\t\treturn result.data;\n\t}\n\n\tprivate async request<T>(\n\t\tmethod: Method,\n\t\tpath: string,\n\t\tbody: unknown,\n\t\tquery: Record<string, string | number | undefined> = {},\n\t\tinit: RequestInit = {},\n\t) {\n\t\tconst url = this.url(path, query);\n\n\t\tconst headers = new Headers({\n\t\t\t...(init?.headers ?? {}),\n\t\t\tAuthorization: this.options.authentication,\n\t\t});\n\n\t\tif (!IS_BROWSER) {\n\t\t\theaders.set('User-Agent', 'Hop-API-Client');\n\t\t}\n\n\t\t// Treat falsy values as valid body\n\t\t// only undefined is not\n\t\tif (body !== undefined) {\n\t\t\tif (method === 'GET') {\n\t\t\t\tthrow new Error('Cannot send a GET request with a body');\n\t\t\t}\n\n\t\t\theaders.set('Content-Type', 'application/json');\n\t\t}\n\n\t\tconst request = new Request(url, {\n\t\t\tmethod,\n\t\t\tbody: body ? JSON.stringify(body) : undefined,\n\t\t\theaders,\n\t\t\t...init,\n\t\t});\n\n\t\treturn this.parseResponse<T>(request, await fetch(request));\n\t}\n}\n","import {create} from '@onehop/json-methods';\nimport {API, Id} from '../rest/index.js';\nimport {sdk} from './create.js';\n\ntype Token = Id<'leap_token'>;\n\n/**\n * New state to set to a channel, or a callback function that will produce the new state\n */\nexport type SetStateAction<T extends API.Channels.State> =\n\t| T\n\t| ((oldState: T) => T | Promise<T>);\n\nexport const channels = sdk(client => {\n\tconst Channels = create<API.Channels.Channel>().methods({\n\t\tasync setState<T extends API.Channels.State>(state: SetStateAction<T>) {\n\t\t\tawait updateState(this.id, state, 'set');\n\t\t},\n\n\t\tasync patchState<T extends API.Channels.State>(state: SetStateAction<T>) {\n\t\t\tawait updateState(this.id, state, 'patch');\n\t\t},\n\n\t\tasync subscribeToken(token: Token) {\n\t\t\tawait channelsSDK.subscribeToken(this.id, token);\n\t\t},\n\n\t\tasync subscribeTokens(tokens: Token[] | Set<Token>) {\n\t\t\tawait channelsSDK.subscribeTokens(this.id, tokens);\n\t\t},\n\n\t\tasync publishMessage(name: string, data: unknown) {\n\t\t\tawait channelsSDK.publishMessage(this.id, name, data);\n\t\t},\n\t});\n\n\tasync function updateState<T extends API.Channels.State>(\n\t\tchannelId: API.Channels.Channel['id'],\n\t\tnewState: SetStateAction<T>,\n\t\tmode: 'patch' | 'set',\n\t) {\n\t\tlet state: API.Channels.State;\n\n\t\tif (typeof newState === 'function') {\n\t\t\tconst {state: oldState} = await client.get(\n\t\t\t\t'/v1/channels/:channel_id/state',\n\t\t\t\t{channel_id: channelId},\n\t\t\t);\n\n\t\t\tstate = await newState(oldState as T);\n\t\t} else {\n\t\t\tstate = newState;\n\t\t}\n\n\t\tif (mode === 'patch') {\n\t\t\tawait client.patch('/v1/channels/:channel_id/state', state, {\n\t\t\t\tchannel_id: channelId,\n\t\t\t});\n\t\t} else {\n\t\t\tawait client.put('/v1/channels/:channel_id/state', state, {\n\t\t\t\tchannel_id: channelId,\n\t\t\t});\n\t\t}\n\t}\n\n\tconst channelsSDK = {\n\t\t/**\n\t\t * Creates a new channel\n\t\t *\n\t\t * @param type The type of the channel to create\n\t\t * @param id An ID to assign to the channel (optional, set this to `undefined` or `null` if you do not want to specify an ID)\n\t\t * @param project A project ID (if necessary) to assign this to\n\t\t */\n\t\tasync create<T extends API.Channels.State>(\n\t\t\ttype: API.Channels.ChannelType,\n\t\t\tid?: string | null,\n\t\t\toptions?: {state?: T} | null,\n\t\t\tproject?: Id<'project'>,\n\t\t) {\n\t\t\tif (!project && client.authType !== 'ptk') {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Project must be provided when creating a channel with bearer or PAT auth',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst {channel} = id\n\t\t\t\t? await client.put(\n\t\t\t\t\t\t'/v1/channels/:channel_id',\n\t\t\t\t\t\t{type, state: options?.state ?? {}},\n\t\t\t\t\t\t{project, channel_id: id},\n\t\t\t\t  )\n\t\t\t\t: await client.post(\n\t\t\t\t\t\t'/v1/channels',\n\t\t\t\t\t\t{type, state: options?.state ?? {}},\n\t\t\t\t\t\t{project},\n\t\t\t\t  );\n\n\t\t\treturn Channels.from(channel);\n\t\t},\n\n\t\tasync get(id: API.Channels.Channel['id']) {\n\t\t\tconst {channel} = await client.get('/v1/channels/:channel_id', {\n\t\t\t\tchannel_id: id,\n\t\t\t});\n\n\t\t\treturn Channels.from(channel);\n\t\t},\n\n\t\t/**\n\t\t * Get all channels for a project\n\t\t *\n\t\t * @param project An optional project ID if authenticating with a PAT or Bearer\n\t\t */\n\t\tasync getAll(project?: Id<'project'>) {\n\t\t\tconst {channels} = await client.get('/v1/channels', {project});\n\t\t\treturn channels.map(Channels.from);\n\t\t},\n\n\t\tasync subscribeToken(\n\t\t\tchannel: API.Channels.Channel | API.Channels.Channel['id'],\n\t\t\ttoken: Token,\n\t\t) {\n\t\t\tconst id = typeof channel === 'object' ? channel.id : channel;\n\n\t\t\tawait client.put(\n\t\t\t\t'/v1/channels/:channel_id/subscribers/:token',\n\t\t\t\tundefined,\n\t\t\t\t{channel_id: id, token},\n\t\t\t);\n\t\t},\n\n\t\tasync subscribeTokens(\n\t\t\tchannel: API.Channels.Channel | API.Channels.Channel['id'],\n\t\t\ttokens: Token[] | Set<Token>,\n\t\t) {\n\t\t\tconst promises: Array<Promise<void>> = [];\n\n\t\t\tfor (const subscription of tokens) {\n\t\t\t\tpromises.push(this.subscribeToken(channel, subscription));\n\t\t\t}\n\n\t\t\tawait Promise.allSettled(promises);\n\t\t},\n\n\t\tasync getAllTokens(\n\t\t\tchannel: API.Channels.Channel['id'] | API.Channels.Channel,\n\t\t) {\n\t\t\tconst id = typeof channel === 'object' ? channel.id : channel;\n\n\t\t\tconst {tokens} = await client.get('/v1/channels/:channel_id/tokens', {\n\t\t\t\tchannel_id: id,\n\t\t\t});\n\n\t\t\treturn tokens;\n\t\t},\n\n\t\tasync setState<T extends API.Channels.State = API.Channels.State>(\n\t\t\tchannel: API.Channels.Channel | API.Channels.Channel['id'],\n\t\t\tstate: SetStateAction<T>,\n\t\t) {\n\t\t\tconst id = typeof channel === 'object' ? channel.id : channel;\n\t\t\treturn updateState(id, state, 'set');\n\t\t},\n\n\t\tasync patchState<T extends API.Channels.State>(\n\t\t\tchannel: API.Channels.Channel | API.Channels.Channel['id'],\n\t\t\tstate: SetStateAction<T>,\n\t\t) {\n\t\t\tconst id = typeof channel === 'object' ? channel.id : channel;\n\t\t\treturn updateState(id, state, 'patch');\n\t\t},\n\n\t\t/**\n\t\t * Publishes a new event to a channel\n\t\t * @param channel The channel to publish to\n\t\t * @param event The event name\n\t\t * @param data The data for this event\n\t\t */\n\t\tasync publishMessage<T>(\n\t\t\tchannel: API.Channels.Channel | API.Channels.Channel['id'],\n\t\t\tevent: string,\n\t\t\tdata: T,\n\t\t) {\n\t\t\tconst id = typeof channel === 'object' ? channel.id : channel;\n\n\t\t\tawait client.post(\n\t\t\t\t'/v1/channels/:channel_id/messages',\n\t\t\t\t{e: event, d: data},\n\t\t\t\t{channel_id: id},\n\t\t\t);\n\t\t},\n\n\t\ttokens: {\n\t\t\t/**\n\t\t\t * Creates a new channel token for a project\n\t\t\t *\n\t\t\t * @param state The state to set on the token\n\t\t\t * @param project The project to attach this token to\n\t\t\t */\n\t\t\tasync create(state: API.Channels.State = {}, project?: Id<'project'>) {\n\t\t\t\tif (!project && client.authType !== 'ptk') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project must be provided when creating a channel token with bearer or PAT auth',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst {token} = await client.post(\n\t\t\t\t\t'/v1/channels/tokens',\n\t\t\t\t\t{state},\n\t\t\t\t\t{project},\n\t\t\t\t);\n\n\t\t\t\treturn token;\n\t\t\t},\n\n\t\t\tasync get(id: Id<'leap_token'>) {\n\t\t\t\tconst {token} = await client.get('/v1/channels/tokens/:token_id', {\n\t\t\t\t\ttoken_id: id,\n\t\t\t\t});\n\n\t\t\t\treturn token;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Publishes a direct message to a single token\n\t\t\t * @param token The token to publish a direct message to\n\t\t\t * @param event The event name\n\t\t\t * @param data The data for this event\n\t\t\t */\n\t\t\tasync publishDirectMessage<T>(\n\t\t\t\ttoken: Id<'leap_token'>,\n\t\t\t\tevent: string,\n\t\t\t\tdata: T,\n\t\t\t) {\n\t\t\t\tawait client.post(\n\t\t\t\t\t'/v1/channels/tokens/:token/messages',\n\t\t\t\t\t{e: event, d: data},\n\t\t\t\t\t{token},\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t};\n\n\treturn channelsSDK;\n});\n","import {APIClient} from '../rest/index.js';\n\nexport function sdk<T>(builder: (client: APIClient) => T) {\n\treturn builder;\n}\n","import {create, Infer} from '@onehop/json-methods';\nimport {API, assertId, Id} from '../rest/index.js';\nimport {Deployment, Gateway, GatewayType} from '../rest/types/ignite.js';\nimport {parseSize} from '../util/index.js';\nimport {sdk} from './create.js';\n\nconst SIX_MB_IN_BYTES = 6 * 1024 * 1024;\n\nexport const ignite = sdk(client => {\n\tconst Gateways = create<API.Ignite.Gateway>().methods({\n\t\tasync addDomain(domain: string) {\n\t\t\tawait client.post(\n\t\t\t\t'/v1/ignite/gateways/:gateway_id/domains',\n\t\t\t\t{domain},\n\t\t\t\t{gateway_id: this.id},\n\t\t\t);\n\t\t},\n\t});\n\n\tconst Deployments = create<API.Ignite.Deployment>().methods({\n\t\tgetContainers() {\n\t\t\treturn igniteSDK.deployments.getContainers(this.id);\n\t\t},\n\n\t\tdelete() {\n\t\t\treturn igniteSDK.deployments.delete(this.id);\n\t\t},\n\n\t\tcreateContainer() {\n\t\t\treturn igniteSDK.containers.create(this.id);\n\t\t},\n\n\t\tcreateGateway(\n\t\t\ttype: API.Ignite.GatewayType,\n\t\t\tprotocol: API.Ignite.Gateway['protocol'],\n\t\t\tport: number,\n\t\t) {\n\t\t\treturn igniteSDK.deployments.gateways.create(\n\t\t\t\tthis.id,\n\t\t\t\ttype,\n\t\t\t\tprotocol,\n\t\t\t\tport,\n\t\t\t);\n\t\t},\n\t});\n\n\t/**\n\t * Creates a new deployment.\n\t * You should use this overload if you are authorizing with a bearer or pat.\n\t *\n\t * @param configOrProject The project ID to create the deployment in.\n\t * @param bearerOrPatConfig The deployment config to create.\n\t */\n\tasync function createDeployment(\n\t\tconfigOrProject: Id<'project'>,\n\t\tbearerOrPatConfig: API.Ignite.DeploymentConfig,\n\t): Promise<Infer<typeof Deployments>>;\n\n\t/**\n\t * Create a new deployment. You should use this overload if you are authorizing with a project token and\n\t * not with a bearer or pat.\n\t *\n\t * @param configOrProject The config for this deployment.\n\t */\n\tasync function createDeployment(\n\t\tconfigOrProject: API.Ignite.DeploymentConfig,\n\t): Promise<Infer<typeof Deployments>>;\n\n\tasync function createDeployment(\n\t\tconfigOrProject: Id<'project'> | API.Ignite.DeploymentConfig,\n\t\tbearerOrPatConfig?: API.Ignite.DeploymentConfig,\n\t): Promise<Infer<typeof Deployments>> {\n\t\tlet config: API.Ignite.DeploymentConfig;\n\t\tlet project: Id<'project'> | undefined = undefined;\n\n\t\tif (typeof configOrProject === 'object') {\n\t\t\tif (client.authType === 'ptk') {\n\t\t\t\tconfig = configOrProject;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'First argument must be the project ID when using bearer authentication to create deployments.',\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!bearerOrPatConfig) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Second argument must be the deployment config when using bearer authentication to create deployments.',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (client.authType === 'bearer' || client.authType === 'pat') {\n\t\t\t\tproject = configOrProject;\n\t\t\t\tconfig = bearerOrPatConfig;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Only argument must be the config when using secret authentication to create deployments.',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Hop's runtime requires a minimum of 6mb of memory per container\n\t\t// It's useful to validate this at the SDK level as well as API level.\n\t\tif (parseSize(config.resources.ram) <= SIX_MB_IN_BYTES) {\n\t\t\tthrow new Error(\n\t\t\t\t'Allocated memory must be greater than 6MB when creating a deployment.',\n\t\t\t);\n\t\t}\n\n\t\tconst {deployment} = await client.post('/v1/ignite/deployments', config, {\n\t\t\tproject,\n\t\t});\n\n\t\treturn Deployments.from(deployment);\n\t}\n\n\tasync function updateContainerState(\n\t\tcontainer: Id<'container'>,\n\t\tstate:\n\t\t\t| API.Ignite.ContainerState.RUNNING\n\t\t\t| API.Ignite.ContainerState.STOPPED,\n\t) {\n\t\tawait client.put(\n\t\t\t'/v1/ignite/containers/:container_id/state',\n\t\t\t{preferred_state: state},\n\t\t\t{container_id: container},\n\t\t);\n\t}\n\n\t/**\n\t * Gets a deployment by name\n\t *\n\t * @param projectId The project ID. You only need to provide this if you are getting by name.\n\t * @param name The deployment name to get\n\t */\n\tasync function getDeployment(\n\t\tprojectId: Id<'project'>,\n\t\tname: string,\n\t): Promise<Infer<typeof Deployments>>;\n\n\t/**\n\t * Gets a deployment by id\n\t *\n\t * @param id The deployment ID\n\t */\n\tasync function getDeployment(\n\t\tid: Id<'deployment'>,\n\t): Promise<Infer<typeof Deployments>>;\n\n\tasync function getDeployment(\n\t\tprojectIdOrId: Id<'project'> | Id<'deployment'>,\n\t\tname?: string,\n\t): Promise<Infer<typeof Deployments>> {\n\t\tif (name) {\n\t\t\tassertId(\n\t\t\t\tprojectIdOrId,\n\t\t\t\t'project',\n\t\t\t\t'You must provide a project ID to get a deployment by name',\n\t\t\t);\n\n\t\t\tconst {deployment} = await client.get('/v1/ignite/deployments/search', {\n\t\t\t\tname,\n\t\t\t\tproject: projectIdOrId,\n\t\t\t});\n\n\t\t\treturn Deployments.from(deployment);\n\t\t}\n\n\t\tassertId(\n\t\t\tprojectIdOrId,\n\t\t\t'deployment',\n\t\t\t'You must provide a valid deployment ID.',\n\t\t);\n\n\t\tconst {deployment} = await client.get(\n\t\t\t'/v1/ignite/deployments/:deployment_id',\n\t\t\t{deployment_id: projectIdOrId},\n\t\t);\n\n\t\treturn Deployments.from(deployment);\n\t}\n\n\tconst igniteSDK = {\n\t\tgateways: {\n\t\t\t/**\n\t\t\t * Adds a domain to a gateway\n\t\t\t *\n\t\t\t * @param gatewayId The ID of the gateway\n\t\t\t * @param domain The full name of the domain\n\t\t\t */\n\t\t\tasync addDomain(gatewayId: Id<'gateway'>, domain: string) {\n\t\t\t\tawait client.post(\n\t\t\t\t\t'/v1/ignite/gateways/:gateway_id/domains',\n\t\t\t\t\t{domain},\n\t\t\t\t\t{gateway_id: gatewayId},\n\t\t\t\t);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Fetches a gateway by ID\n\t\t\t *\n\t\t\t * @param gatewayId The ID of the gateway to retrieve\n\t\t\t */\n\t\t\tasync get(gatewayId: Id<'gateway'>) {\n\t\t\t\tconst {gateway} = await client.get('/v1/ignite/gateways/:gateway_id', {\n\t\t\t\t\tgateway_id: gatewayId,\n\t\t\t\t});\n\n\t\t\t\treturn gateway;\n\t\t\t},\n\t\t},\n\n\t\tdeployments: {\n\t\t\tcreate: createDeployment,\n\t\t\tget: getDeployment,\n\n\t\t\t/**\n\t\t\t * Get all containers for a deployment\n\t\t\t *\n\t\t\t * @param deployment The ID of the deployment to get\n\t\t\t * @returns A list of all containers for that project\n\t\t\t */\n\t\t\tasync getContainers(deployment: Id<'deployment'>) {\n\t\t\t\tconst {containers} = await client.get(\n\t\t\t\t\t'/v1/ignite/deployments/:deployment_id/containers',\n\t\t\t\t\t{deployment_id: deployment},\n\t\t\t\t);\n\n\t\t\t\treturn containers;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Gets all deployments for a project\n\t\t\t *\n\t\t\t * @param projectId The project ID to list deployments for. You only need to provide this if you are using bearer or PAT authentication.\n\t\t\t * @returns A list of deployments for the given project.\n\t\t\t */\n\t\t\tasync getAll(projectId?: Id<'project'>) {\n\t\t\t\tif (client.authType !== 'ptk' && !projectId) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is required for Bearer or PAT authentication',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (client.authType === 'ptk' && projectId) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is not required for secret authentication',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst {deployments} = await client.get(\n\t\t\t\t\t'/v1/ignite/deployments',\n\t\t\t\t\tprojectId ? {project: projectId} : {},\n\t\t\t\t);\n\n\t\t\t\treturn deployments.map(Deployments.from);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Deletes a deployment\n\t\t\t *\n\t\t\t * @param deployment The ID of the deployment\n\t\t\t */\n\t\t\tasync delete(deployment: Id<'deployment'>) {\n\t\t\t\tawait client.delete(\n\t\t\t\t\t'/v1/ignite/deployments/:deployment_id',\n\t\t\t\t\tundefined,\n\t\t\t\t\t{deployment_id: deployment},\n\t\t\t\t);\n\t\t\t},\n\n\t\t\tgateways: {\n\t\t\t\t/**\n\t\t\t\t * Fecthes all gateways attached to a deployment\n\t\t\t\t *\n\t\t\t\t * @param deploymentId The ID of the deployment to fetch gateways for\n\t\t\t\t */\n\t\t\t\tasync getAll(deploymentId: Id<'deployment'>) {\n\t\t\t\t\tconst {gateways} = await client.get(\n\t\t\t\t\t\t'/v1/ignite/deployments/:deployment_id/gateways',\n\t\t\t\t\t\t{deployment_id: deploymentId},\n\t\t\t\t\t);\n\n\t\t\t\t\treturn gateways.map(Gateways.from);\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * Creates and attaches a gateway to a deployment\n\t\t\t\t *\n\t\t\t\t * @param deployment The deployment to create a gateway on\n\t\t\t\t * @param type The type of the gatway to create, either internal or external\n\t\t\t\t * @param protocol The protocol that the gateway will listen for\n\t\t\t\t * @param listeningPort The port to listen on\n\t\t\t\t */\n\t\t\t\tasync create(\n\t\t\t\t\tdeployment: Deployment | Deployment['id'],\n\t\t\t\t\ttype: GatewayType,\n\t\t\t\t\tprotocol: Gateway['protocol'],\n\t\t\t\t\tlisteningPort: number,\n\t\t\t\t) {\n\t\t\t\t\tconst deploymentId =\n\t\t\t\t\t\ttypeof deployment === 'object' ? deployment.id : deployment;\n\n\t\t\t\t\tconst {gateway} = await client.post(\n\t\t\t\t\t\t'/v1/ignite/deployments/:deployment_id/gateways',\n\t\t\t\t\t\t{type, protocol, listening_port: listeningPort},\n\t\t\t\t\t\t{deployment_id: deploymentId},\n\t\t\t\t\t);\n\n\t\t\t\t\treturn Gateways.from(gateway);\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\n\t\tcontainers: {\n\t\t\t/**\n\t\t\t * Deletes a container\n\t\t\t *\n\t\t\t * @param container The ID of the container to delete.\n\t\t\t */\n\t\t\tasync delete(container: Id<'container'>) {\n\t\t\t\tawait client.delete('/v1/ignite/containers/:container_id', undefined, {\n\t\t\t\t\tcontainer_id: container,\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get the logs for a container\n\t\t\t *\n\t\t\t * @param container The ID of the container\n\t\t\t * @returns\n\t\t\t */\n\t\t\tasync getLogs(\n\t\t\t\tcontainer: Id<'container'>,\n\t\t\t\toptions: Partial<{\n\t\t\t\t\tsortBy: 'timestamp';\n\t\t\t\t\torderBy: 'desc' | 'asc';\n\t\t\t\t\tlimit: number;\n\t\t\t\t\toffset: number;\n\t\t\t\t}> = {},\n\t\t\t) {\n\t\t\t\tconst {logs} = await client.get(\n\t\t\t\t\t'/v1/ignite/containers/:container_id/logs',\n\t\t\t\t\t{container_id: container, ...options},\n\t\t\t\t);\n\n\t\t\t\treturn logs;\n\t\t\t},\n\n\t\t\tasync stop(container: Id<'container'>) {\n\t\t\t\tawait updateContainerState(\n\t\t\t\t\tcontainer,\n\t\t\t\t\tAPI.Ignite.ContainerState.STOPPED,\n\t\t\t\t);\n\t\t\t},\n\n\t\t\tasync start(container: Id<'container'>) {\n\t\t\t\tawait updateContainerState(\n\t\t\t\t\tcontainer,\n\t\t\t\t\tAPI.Ignite.ContainerState.RUNNING,\n\t\t\t\t);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a container\n\t\t\t *\n\t\t\t * @param deployment The ID of a deployment to create a container in.\n\t\t\t * @returns The newly created container.\n\t\t\t */\n\t\t\tasync create(deployment: Id<'deployment'>) {\n\t\t\t\tconst {container} = await client.post(\n\t\t\t\t\t'/v1/ignite/deployments/:deployment_id/containers',\n\t\t\t\t\tundefined,\n\t\t\t\t\t{deployment_id: deployment},\n\t\t\t\t);\n\n\t\t\t\treturn container;\n\t\t\t},\n\t\t},\n\t};\n\n\treturn igniteSDK;\n});\n","export const units = ['gb', 'mb', 'kb', 'b'] as const;\n\nexport type ByteString = `${number}${typeof units[number]}`;\n\nexport function isValidByteString(value: string): value is ByteString {\n\treturn units.some(unit => {\n\t\tif (!value.endsWith(unit)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !isNaN(parseFloat(value.slice(0, -unit.length)));\n\t});\n}\n\n/**\n * Parses a byte size string into bytes\n * @param size The size of anything in gigabytes, megabytes, kilobytes or bytes\n */\nexport function parseSize(size: string) {\n\tsize = size.toLowerCase();\n\n\tconst unit = units.find(u => size.endsWith(u));\n\tif (!unit) {\n\t\tthrow new Error(`Invalid size: ${size}`);\n\t}\n\n\tconst num = parseFloat(size.slice(0, -unit.length));\n\tif (isNaN(num)) {\n\t\tthrow new Error(`Invalid size: ${size}`);\n\t}\n\n\tswitch (unit.toLowerCase()) {\n\t\tcase 'gb':\n\t\t\treturn num * 1024 * 1024 * 1024;\n\t\tcase 'mb':\n\t\t\treturn num * 1024 * 1024;\n\t\tcase 'kb':\n\t\t\treturn num * 1024;\n\t\tcase 'b':\n\t\tdefault:\n\t\t\treturn num;\n\t}\n}\n","import {create} from '@onehop/json-methods';\nimport {API, Id} from '../rest/index.js';\nimport {Regions} from '../rest/types/ignite.js';\nimport {DeliveryProtocol} from '../rest/types/pipe.js';\nimport {sdk} from './create.js';\n\nexport const pipe = sdk(client => {\n\tconst Rooms = create<API.Pipe.Room>().methods({\n\t\tasync delete() {\n\t\t\tawait pipeSDK.rooms.delete(this.id);\n\t\t},\n\t});\n\n\tconst pipeSDK = {\n\t\trooms: {\n\t\t\tasync getAll(project?: Id<'project'>) {\n\t\t\t\tif (!project && client.authType !== 'ptk') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'You must provide ID project id when using a bearer or pat token.',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst {rooms} = await client.get('/v1/pipe/rooms', {project});\n\n\t\t\t\treturn rooms.map(Rooms.from);\n\t\t\t},\n\n\t\t\tasync create(\n\t\t\t\tname: string,\n\t\t\t\toptions: {\n\t\t\t\t\tdeliveryProtocols: DeliveryProtocol[];\n\t\t\t\t\tephemeral?: boolean;\n\t\t\t\t\tingestProtocol: 'rtmp' | 'rtp';\n\t\t\t\t\thlsConfig?: {\n\t\t\t\t\t\twcl_delay: number;\n\t\t\t\t\t\tartificial_delay: number;\n\t\t\t\t\t\tmax_playout_bitrate_preset: string;\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t) {\n\t\t\t\tconst {room} = await client.post(\n\t\t\t\t\t'/v1/pipe/rooms',\n\t\t\t\t\t{\n\t\t\t\t\t\tname,\n\n\t\t\t\t\t\tingest_protocol: options.ingestProtocol,\n\t\t\t\t\t\tregion: Regions.US_EAST_1,\n\n\t\t\t\t\t\tephemeral: options.ephemeral ?? false,\n\n\t\t\t\t\t\tdelivery_protocols: options.deliveryProtocols,\n\t\t\t\t\t\tllhls_config: options.hlsConfig,\n\t\t\t\t\t},\n\t\t\t\t\t{},\n\t\t\t\t);\n\n\t\t\t\treturn Rooms.from(room);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Deletes a Pipe room\n\t\t\t *\n\t\t\t * @param room The ID of the Pipe room to delete.\n\t\t\t */\n\t\t\tasync delete(room: Id<'pipe_room'>) {\n\t\t\t\tawait client.delete('/v1/pipe/rooms/:room_id', undefined, {\n\t\t\t\t\troom_id: room,\n\t\t\t\t});\n\t\t\t},\n\t\t},\n\t};\n\n\treturn pipeSDK;\n});\n","import {API, Endpoints, Id} from '../rest/index.js';\nimport {sdk} from './create.js';\n\nexport const projects = sdk(client => {\n\treturn {\n\t\tasync getAllMembers(projectId?: Id<'project'>) {\n\t\t\tif (client.authType !== 'ptk' && !projectId) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Project ID is required for bearer or PAT authentication to fetch all project members',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (projectId) {\n\t\t\t\tconst {members} = await client.get('/v1/projects/:project_id/members', {\n\t\t\t\t\tproject_id: projectId,\n\t\t\t\t});\n\n\t\t\t\treturn members;\n\t\t\t}\n\n\t\t\tconst {members} = await client.get('/v1/projects/@this/members', {});\n\n\t\t\treturn members;\n\t\t},\n\n\t\t/**\n\t\t * Fetch the currently authorized member from a project.\n\t\t * You cannot use this route if you are authorizing with a project token as there is no user attached to it.\n\t\t *\n\t\t * @param projectId The project ID to fetch a member from\n\t\t * @returns The member authorized by the SDK\n\t\t */\n\t\tasync getCurrentMember(projectId: Id<'project'>) {\n\t\t\tif (client.authType === 'ptk') {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'You cannot resolve a member from a project token! You must use a bearer or pat token',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst {project_member: member} = await client.get(\n\t\t\t\t'/v1/projects/:project_id/members/@me',\n\t\t\t\t{project_id: projectId},\n\t\t\t);\n\n\t\t\treturn member;\n\t\t},\n\n\t\tprojectTokens: {\n\t\t\t/**\n\t\t\t * Deletes a project token by its ID\n\t\t\t *\n\t\t\t * @param projectTokenId The ID of the project token to delete\n\t\t\t */\n\t\t\tasync delete(projectTokenId: Id<'ptkid'>, project?: Id<'project'>) {\n\t\t\t\tif (client.authType !== 'ptk' && !project) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is required for bearer or PAT authentication to delete a project token',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tawait client.delete(\n\t\t\t\t\tproject\n\t\t\t\t\t\t? '/v1/projects/:project_id/tokens/:project_token_id'\n\t\t\t\t\t\t: '/v1/projects/@this/tokens/:project_token_id',\n\t\t\t\t\tundefined,\n\t\t\t\t\tproject\n\t\t\t\t\t\t? {project_id: project, project_token_id: projectTokenId}\n\t\t\t\t\t\t: {project_token_id: projectTokenId},\n\t\t\t\t);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get all project tokens for a project\n\t\t\t *\n\t\t\t * @param projectId The project to fetch secrets for\n\t\t\t * @returns An array of all secrets for the project\n\t\t\t */\n\t\t\tasync get(projectId?: Id<'project'>) {\n\t\t\t\tif (client.authType !== 'ptk' && !projectId) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is required for bearer or PAT authentication',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!projectId) {\n\t\t\t\t\tconst {project_tokens: keys} = await client.get(\n\t\t\t\t\t\t'/v1/projects/@this/tokens',\n\t\t\t\t\t\t{},\n\t\t\t\t\t);\n\n\t\t\t\t\treturn keys;\n\t\t\t\t}\n\n\t\t\t\tconst {project_tokens: keys} = await client.get(\n\t\t\t\t\t'/v1/projects/:project_id/tokens',\n\t\t\t\t\t{project_id: projectId},\n\t\t\t\t);\n\n\t\t\t\treturn keys;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a new project token\n\t\t\t *\n\t\t\t * @param projectId The project to create a key for\n\t\t\t * @param flags Permissions for this flag\n\t\t\t * @returns A newly created project token\n\t\t\t */\n\t\t\tasync create(flags: number, projectId?: Id<'project'>) {\n\t\t\t\tif (!projectId && client.authType !== 'ptk') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is required for bearer or PAT authentication to create a project token',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!projectId) {\n\t\t\t\t\tconst {project_token: token} = await client.post(\n\t\t\t\t\t\t'/v1/projects/@this/tokens',\n\t\t\t\t\t\t{flags},\n\t\t\t\t\t\t{},\n\t\t\t\t\t);\n\n\t\t\t\t\treturn token;\n\t\t\t\t}\n\n\t\t\t\tconst {project_token: token} = await client.post(\n\t\t\t\t\t'/v1/projects/:project_id/tokens',\n\t\t\t\t\t{flags},\n\t\t\t\t\t{project_id: projectId},\n\t\t\t\t);\n\n\t\t\t\treturn token;\n\t\t\t},\n\t\t},\n\n\t\tsecrets: {\n\t\t\t/**\n\t\t\t * Gets all secrets in a project\n\t\t\t *\n\t\t\t * @param projectId The project to fetch secrets for\n\t\t\t */\n\t\t\tasync getAll(projectId?: Id<'project'>) {\n\t\t\t\tif (client.authType !== 'ptk' && !projectId) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is required for bearer or PAT authentication to fetch all secrets',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!projectId) {\n\t\t\t\t\tconst {secrets} = await client.get('/v1/projects/@this/secrets', {});\n\n\t\t\t\t\treturn secrets;\n\t\t\t\t}\n\n\t\t\t\tconst {secrets} = await client.get('/v1/projects/:project_id/secrets', {\n\t\t\t\t\tproject_id: projectId,\n\t\t\t\t});\n\n\t\t\t\treturn secrets;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a new project secret\n\t\t\t *\n\t\t\t * @param name The name of the secret\n\t\t\t * @param value The value of the secret\n\t\t\t * @param projectId The project to create the secret in\n\t\t\t */\n\t\t\tasync create(name: string, value: string, projectId?: Id<'project'>) {\n\t\t\t\tif (client.authType !== 'ptk' && !projectId) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is required for bearer or PAT authentication to create a secret',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst url = client.url('/v1/projects/@this/secrets/:name', {\n\t\t\t\t\tname,\n\t\t\t\t\tproject: projectId,\n\t\t\t\t});\n\n\t\t\t\tconst request = new Request(url, {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'text/plain',\n\t\t\t\t\t},\n\t\t\t\t\tbody: value,\n\t\t\t\t\tmethod: 'PUT',\n\t\t\t\t});\n\n\t\t\t\tconst {secret} = await client.raw<\n\t\t\t\t\tExtract<\n\t\t\t\t\t\tEndpoints,\n\t\t\t\t\t\t{method: 'PUT'; path: '/v1/projects/@this/secrets/:name'}\n\t\t\t\t\t>['res']\n\t\t\t\t>(request);\n\n\t\t\t\treturn secret;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Deletes a secret from a project\n\t\t\t *\n\t\t\t * @param id The secret ID to delete\n\t\t\t * @param projectId The project to delete the secret from\n\t\t\t */\n\t\t\tasync delete(\n\t\t\t\tid: Id<'secret'> | API.Projects.Secret['name'],\n\t\t\t\tprojectId?: Id<'project'>,\n\t\t\t) {\n\t\t\t\tif (client.authType !== 'ptk' && !projectId) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is required for bearer or PAT authentication to delete a secret',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!projectId) {\n\t\t\t\t\tawait client.delete(\n\t\t\t\t\t\t'/v1/projects/@this/secrets/:secret_id',\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsecret_id: id,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait client.delete(\n\t\t\t\t\t'/v1/projects/:project_id/secrets/:secret_id',\n\t\t\t\t\tundefined,\n\t\t\t\t\t{secret_id: id, project_id: projectId},\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t};\n});\n","import {Id} from '../rest/index.js';\nimport {sdk} from './create.js';\n\nexport const registry = sdk(client => {\n\treturn {\n\t\timages: {\n\t\t\tasync getAll(project?: Id<'project'>) {\n\t\t\t\tif (!project && client.authType !== 'ptk') {\n\t\t\t\t\tthrow new Error('Project is required when using a PAT or bearer');\n\t\t\t\t}\n\n\t\t\t\tconst {images} = await client.get('/v1/registry/images', {\n\t\t\t\t\tproject,\n\t\t\t\t});\n\n\t\t\t\treturn images;\n\t\t\t},\n\n\t\t\tasync getManifest(image: string) {\n\t\t\t\tconst {manifests} = await client.get(\n\t\t\t\t\t'/v1/registry/images/:image/manifests',\n\t\t\t\t\t{image},\n\t\t\t\t);\n\n\t\t\t\treturn manifests;\n\t\t\t},\n\n\t\t\tasync delete(image: string) {\n\t\t\t\tawait client.delete('/v1/registry/images/:image', undefined, {image});\n\t\t\t},\n\t\t},\n\t};\n});\n","import {Id} from '../util/types.js';\nimport {sdk} from './create.js';\n\nexport const users = sdk(client => ({\n\tme: {\n\t\t/**\n\t\t * Gets the current user\n\t\t *\n\t\t * @returns The current user authorized by the SDK\n\t\t */\n\t\tasync get() {\n\t\t\tif (client.authType === 'ptk') {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'You cannot resolve a user from a project token! You must use a Bearer or PAT.',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst me = await client.get('/v1/users/@me', {});\n\n\t\t\treturn me;\n\t\t},\n\n\t\tpats: {\n\t\t\t/**\n\t\t\t * Creates a PAT for the current user\n\t\t\t *\n\t\t\t * @returns The created PAT\n\t\t\t */\n\t\t\tasync create(name: string) {\n\t\t\t\tif (client.authType === 'ptk') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'You cannot create a PAT from a project token! You must use a Bearer or PAT.',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst {pat} = await client.post('/v1/users/@me/pats', {name}, {});\n\n\t\t\t\treturn pat;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Fetches all PATs for this user\n\t\t\t *\n\t\t\t * @returns A list of all pats\n\t\t\t */\n\t\t\tasync getAll() {\n\t\t\t\tif (client.authType === 'ptk') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'You cannot get all PATs from a project token! You must use a Bearer or PAT.',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst {pats} = await client.get('/v1/users/@me/pats', {});\n\n\t\t\t\treturn pats;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Deletes a pat\n\t\t\t *\n\t\t\t * @param id The ID of the pat to delete\n\t\t\t */\n\t\t\tasync delete(id: Id<'pat'>) {\n\t\t\t\tif (client.authType === 'ptk') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'You cannot delete a PAT from a project token! You must use a Bearer or PAT.',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tawait client.delete(`/v1/users/@me/pats/:pat_id`, undefined, {\n\t\t\t\t\tpat_id: id,\n\t\t\t\t});\n\t\t\t},\n\t\t},\n\t},\n}));\n","import {APIAuthentication, APIClient, APIClientOptions} from './rest/client.js';\nimport {\n\tchannels,\n\tignite,\n\tpipe,\n\tprojects,\n\tregistry,\n\tusers,\n} from './sdks/index.js';\nimport {DEFAULT_BASE_URL} from './util/constants.js';\n\nexport type PartialAPIOptions = Partial<\n\tOmit<APIClientOptions, 'authentication'>\n> &\n\tPick<APIClientOptions, 'authentication'>;\n\n/**\n * Constructs a new instance of Hop and all of its SDKs.\n *\n * @example\n * ```ts\n * const hop = new Hop(bearerTokenOrPATOrProjectToken);\n * await hop.ignite.containers.create(deploymentId);\n * ```\n */\nexport class Hop {\n\tpublic readonly client: APIClient;\n\n\tpublic readonly ignite;\n\tpublic readonly users;\n\tpublic readonly projects;\n\tpublic readonly pipe;\n\tpublic readonly registry;\n\tpublic readonly channels;\n\n\tconstructor(options: PartialAPIOptions);\n\tconstructor(authentication: APIAuthentication, baseurl?: string);\n\n\tconstructor(\n\t\tauthenticationOrOptions: APIAuthentication | PartialAPIOptions,\n\t\tbaseUrl = DEFAULT_BASE_URL,\n\t) {\n\t\tif (\n\t\t\t!authenticationOrOptions ||\n\t\t\t(typeof authenticationOrOptions === 'object' &&\n\t\t\t\t!authenticationOrOptions.authentication)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'Missing authentication token to `new Hop()` — please provide a valid Project Token, User Bearer or Personal Access Token',\n\t\t\t);\n\t\t}\n\n\t\tthis.client = new APIClient(\n\t\t\ttypeof authenticationOrOptions === 'object'\n\t\t\t\t? {baseUrl: DEFAULT_BASE_URL, ...authenticationOrOptions}\n\t\t\t\t: {authentication: authenticationOrOptions, baseUrl},\n\t\t);\n\n\t\tthis.ignite = ignite(this.client);\n\t\tthis.users = users(this.client);\n\t\tthis.projects = projects(this.client);\n\t\tthis.pipe = pipe(this.client);\n\t\tthis.registry = registry(this.client);\n\t\tthis.channels = channels(this.client);\n\t}\n}\n","export enum PROJECT_PERMISSION {\n\tADD_MEMBER = 'add_member',\n\tREMOVE_MEMBER = 'remove_member',\n\tGET_PROJECT_MEMBERS = 'get_project_members',\n\tDELETE_PROJECT = 'delete_project',\n\tDELETE_DEPLOYMENT = 'delete_deployment',\n\tDELETE_CONTAINER = 'delete_container',\n\tUPDATE_CONTAINER_STATE = 'update_container_state',\n\tREAD_DEPLOYMENTS = 'read_deployments',\n\tCREATE_DEPLOYMENT = 'create_deployment',\n\tCREATE_CONTAINER = 'create_container',\n\tUPDATE_CONTAINER_CONFIG = 'update_container_config',\n\tCREATE_ROOM = 'create_room',\n\tREAD_ROOM = 'read_room',\n\tDELETE_ROOM = 'delete_room',\n\tCREATE_ROOM_PRODUCER = 'create_room_producer',\n\tCREATE_PROJECT_TOKEN = 'create_project_token',\n\tDELETE_PROJECT_TOKEN = 'delete_project_token',\n\tREAD_PROJECT_TOKENS = 'read_project_tokens',\n\tREAD_CONTAINER_LOGS = 'read_container_logs',\n\tCREATE_PROJECT_SECRET = 'create_project_secret',\n\tREAD_PROJECT_SECRETS = 'read_project_secrets',\n\tDELETE_PROJECT_SECRET = 'delete_project_secret',\n\tGET_REGISTRY_IMAGES = 'get_registry_images',\n\tCREATE_CHANNEL = 'create_channel',\n\tCREATE_CHANNEL_TOKEN = 'create_channel_token',\n\tCREATE_LEAP_TOKEN = 'create_leap_token',\n\tCREATE_GATEWAY = 'create_gateway',\n\tADD_DOMAIN = 'add_domain',\n\tDELETE_CHANNELS = 'delete_channels',\n\tUPDATE_CHANNEL_STATE = 'update_channel_state',\n\tPUBLISH_CHANNEL_MESSAGES = 'publish_channel_messages',\n\tREAD_CHANNELS = 'read_channels',\n\tREAD_LEAP_TOKENS = 'read_leap_tokens',\n\tMANAGE_CHANNEL_SUBSCRIBERS = 'manage_channel_subscribers',\n\tUPDATE_LEAP_TOKEN = 'update_leap_token',\n\tDELETE_DOMAIN = 'delete_domain',\n\tDELETE_GATEWAY = 'delete_gateway',\n\tGET_INTERNAL_DOMAIN = 'get_internal_domain',\n\tMESSAGE_TOKEN = 'message_token',\n\tROLLOUT = 'rollout',\n\tREQUEST_QUOTA_INCREASE = 'request_quota_increase',\n\tREAD_BILLING = 'read_billing',\n\tREAD_GATEWAYS = 'read_gateways',\n\tDELETE_REGISTRY_IMAGES = 'delete_registry_images',\n}\n\nexport const permissionsMap = {\n\t[PROJECT_PERMISSION.ADD_MEMBER]: 1n << 0n,\n\t[PROJECT_PERMISSION.REMOVE_MEMBER]: 1n << 1n,\n\t[PROJECT_PERMISSION.GET_PROJECT_MEMBERS]: 1n << 2n,\n\t[PROJECT_PERMISSION.DELETE_PROJECT]: 1n << 3n,\n\t[PROJECT_PERMISSION.DELETE_DEPLOYMENT]: 1n << 4n,\n\t[PROJECT_PERMISSION.DELETE_CONTAINER]: 1n << 5n,\n\t[PROJECT_PERMISSION.UPDATE_CONTAINER_STATE]: 1n << 6n,\n\t[PROJECT_PERMISSION.READ_DEPLOYMENTS]: 1n << 7n,\n\t[PROJECT_PERMISSION.CREATE_DEPLOYMENT]: 1n << 8n,\n\t[PROJECT_PERMISSION.CREATE_CONTAINER]: 1n << 9n,\n\t[PROJECT_PERMISSION.UPDATE_CONTAINER_CONFIG]: 1n << 10n,\n\t[PROJECT_PERMISSION.CREATE_ROOM]: 1n << 11n,\n\t[PROJECT_PERMISSION.READ_ROOM]: 1n << 12n,\n\t[PROJECT_PERMISSION.DELETE_ROOM]: 1n << 13n,\n\t[PROJECT_PERMISSION.CREATE_ROOM_PRODUCER]: 1n << 14n,\n\t[PROJECT_PERMISSION.CREATE_PROJECT_TOKEN]: 1n << 15n,\n\t[PROJECT_PERMISSION.DELETE_PROJECT_TOKEN]: 1n << 16n,\n\t[PROJECT_PERMISSION.READ_PROJECT_TOKENS]: 1n << 17n,\n\t[PROJECT_PERMISSION.READ_CONTAINER_LOGS]: 1n << 18n,\n\t[PROJECT_PERMISSION.CREATE_PROJECT_SECRET]: 1n << 19n,\n\t[PROJECT_PERMISSION.READ_PROJECT_SECRETS]: 1n << 20n,\n\t[PROJECT_PERMISSION.DELETE_PROJECT_SECRET]: 1n << 21n,\n\t[PROJECT_PERMISSION.GET_REGISTRY_IMAGES]: 1n << 22n,\n\t[PROJECT_PERMISSION.CREATE_CHANNEL_TOKEN]: 1n << 24n,\n\t[PROJECT_PERMISSION.CREATE_GATEWAY]: 1n << 25n,\n\t[PROJECT_PERMISSION.ADD_DOMAIN]: 1n << 26n,\n\t[PROJECT_PERMISSION.DELETE_CHANNELS]: 1n << 27n,\n\t[PROJECT_PERMISSION.UPDATE_CHANNEL_STATE]: 1n << 28n,\n\t[PROJECT_PERMISSION.READ_CHANNELS]: 1n << 29n,\n\t[PROJECT_PERMISSION.PUBLISH_CHANNEL_MESSAGES]: 1n << 30n,\n\t[PROJECT_PERMISSION.MANAGE_CHANNEL_SUBSCRIBERS]: 1n << 31n,\n\t[PROJECT_PERMISSION.DELETE_DOMAIN]: 1n << 32n,\n\t[PROJECT_PERMISSION.DELETE_GATEWAY]: 1n << 33n,\n\t[PROJECT_PERMISSION.GET_INTERNAL_DOMAIN]: 1n << 34n,\n\t[PROJECT_PERMISSION.CREATE_LEAP_TOKEN]: 1n << 35n,\n\t[PROJECT_PERMISSION.READ_LEAP_TOKENS]: 1n << 36n,\n\t[PROJECT_PERMISSION.UPDATE_LEAP_TOKEN]: 1n << 37n,\n\t[PROJECT_PERMISSION.MESSAGE_TOKEN]: 1n << 38n,\n\t[PROJECT_PERMISSION.CREATE_CHANNEL]: 1n << 39n,\n\t[PROJECT_PERMISSION.ROLLOUT]: 1n << 40n,\n\t[PROJECT_PERMISSION.REQUEST_QUOTA_INCREASE]: 1n << 41n,\n\t[PROJECT_PERMISSION.READ_BILLING]: 1n << 42n,\n\t[PROJECT_PERMISSION.READ_GATEWAYS]: 1n << 43n,\n\t[PROJECT_PERMISSION.DELETE_REGISTRY_IMAGES]: 1n << 44n,\n};\n\nexport const BROAD_PERMISSIONS_MAP = {\n\tMANAGE_MEMBERS:\n\t\tpermissionsMap.add_member |\n\t\tpermissionsMap.remove_member |\n\t\tpermissionsMap.get_project_members,\n\tMANAGE_PROJECT_TOKENS:\n\t\tpermissionsMap.create_project_token |\n\t\tpermissionsMap.delete_project_token |\n\t\tpermissionsMap.read_project_tokens,\n\tMANAGE_DEPLOYMENTS:\n\t\tpermissionsMap.create_container |\n\t\tpermissionsMap.delete_container |\n\t\tpermissionsMap.update_container_state |\n\t\tpermissionsMap.read_container_logs |\n\t\tpermissionsMap.update_container_config |\n\t\tpermissionsMap.add_domain |\n\t\tpermissionsMap.delete_domain |\n\t\tpermissionsMap.create_deployment |\n\t\tpermissionsMap.delete_deployment |\n\t\tpermissionsMap.read_deployments |\n\t\tpermissionsMap.rollout |\n\t\tpermissionsMap.delete_gateway |\n\t\tpermissionsMap.get_internal_domain,\n\tMANAGE_PIPE:\n\t\tpermissionsMap.create_room |\n\t\tpermissionsMap.delete_room |\n\t\tpermissionsMap.read_room,\n\tMANAGE_SECRETS:\n\t\tpermissionsMap.create_project_secret |\n\t\tpermissionsMap.delete_project_secret |\n\t\tpermissionsMap.read_project_secrets,\n\tMANAGE_CHANNELS:\n\t\tpermissionsMap.create_leap_token |\n\t\tpermissionsMap.create_channel_token |\n\t\tpermissionsMap.create_gateway |\n\t\tpermissionsMap.read_leap_tokens |\n\t\tpermissionsMap.update_leap_token |\n\t\tpermissionsMap.create_channel |\n\t\tpermissionsMap.delete_channels |\n\t\tpermissionsMap.update_channel_state |\n\t\tpermissionsMap.read_channels |\n\t\tpermissionsMap.publish_channel_messages |\n\t\tpermissionsMap.manage_channel_subscribers |\n\t\tpermissionsMap.message_token,\n\tMANAGE_REGISTRY:\n\t\tpermissionsMap.get_registry_images | permissionsMap.delete_registry_images,\n\tREAD_ONLY:\n\t\tpermissionsMap.read_deployments |\n\t\tpermissionsMap.read_container_logs |\n\t\tpermissionsMap.read_room |\n\t\tpermissionsMap.read_channels |\n\t\tpermissionsMap.read_project_tokens |\n\t\tpermissionsMap.read_project_secrets |\n\t\tpermissionsMap.read_leap_tokens |\n\t\tpermissionsMap.get_project_members |\n\t\tpermissionsMap.read_gateways,\n\tMANAGE_QUOTAS: permissionsMap.request_quota_increase,\n\tMANAGE_ROLLOUTS: permissionsMap.rollout,\n\tMANAGE_BILLING: permissionsMap.read_billing,\n};\n\nexport const roles = {\n\tviewer: BROAD_PERMISSIONS_MAP.READ_ONLY,\n\teditor:\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_CHANNELS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_DEPLOYMENTS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_PIPE |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_SECRETS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_REGISTRY |\n\t\tBROAD_PERMISSIONS_MAP.READ_ONLY,\n\tadmin:\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_CHANNELS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_DEPLOYMENTS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_MEMBERS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_PIPE |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_PROJECT_TOKENS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_SECRETS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_REGISTRY |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_QUOTAS |\n\t\tBROAD_PERMISSIONS_MAP.READ_ONLY,\n\towner:\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_CHANNELS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_DEPLOYMENTS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_MEMBERS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_PIPE |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_PROJECT_TOKENS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_SECRETS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_REGISTRY |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_QUOTAS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_ROLLOUTS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_BILLING,\n};\n\nexport const permissions = {\n\tadd(value: bigint, flag: bigint) {\n\t\treturn BigInt(value) | BigInt(flag);\n\t},\n\n\ttest(value: bigint, flag: bigint) {\n\t\treturn Boolean(BigInt(value) & BigInt(flag));\n\t},\n\n\tsubtract(value: bigint, flag: bigint) {\n\t\treturn BigInt(value) & ~BigInt(flag);\n\t},\n};\n"],"mappings":"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","names":["Headers","Request","Response","ChannelType","Regions","RuntimeType","ContainerState","VgpuType","GatewayType","DomainState","ProjectTier","ProjectType","Headers","Request","id","channels","create","create","deployment","create","create","members","keys","token","secrets","id","id","PROJECT_PERMISSION"]}