/* Copyright 2022 Hop, Inc */
var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/util/types.ts
var ID_PREFIXES = [
  {
    prefix: "user",
    description: "Users"
  },
  {
    prefix: "project",
    description: "Project"
  },
  {
    prefix: "pm",
    description: "Project Members"
  },
  {
    prefix: "role",
    description: "Roles"
  },
  {
    prefix: "pi",
    description: "Project Invite"
  },
  {
    prefix: "ptk",
    description: "Project token"
  },
  {
    prefix: "pat",
    description: "User personal access token"
  },
  {
    prefix: "container",
    description: "Ignite container"
  },
  {
    prefix: "pipe_room",
    description: "Pipe room"
  },
  {
    prefix: "deployment",
    description: "Ignite deployment"
  },
  {
    prefix: "bearer",
    description: "Users bearer token"
  },
  {
    prefix: "ptkid",
    description: "Project token ID"
  },
  {
    prefix: "secret",
    description: "Project secret ID"
  },
  {
    prefix: "gateway",
    description: "Gateway"
  },
  {
    prefix: "domain",
    description: "Domain for a gateway"
  },
  {
    prefix: "leap_token",
    description: "Token for connecting to leap as a client"
  },
  {
    prefix: "build",
    description: "Build ID for build logs"
  }
];
function validateIdPrefix(prefix, expect) {
  if (expect) {
    return prefix === expect;
  }
  return ID_PREFIXES.some(({ prefix: p }) => p === prefix);
}
function validateId(maybeId, prefix) {
  if (!prefix) {
    return ID_PREFIXES.some(({ prefix: prefix2 }) => maybeId.startsWith(`${prefix2}_`));
  }
  return maybeId.startsWith(prefix);
}
function getIdPrefix(id2, expect) {
  if (expect && !validateId(id2, expect)) {
    throw new Error(`Expected ${id2} to be an id of type ${expect}`);
  }
  const [prefix] = id2.split("_");
  if (!prefix || !validateIdPrefix(prefix, expect)) {
    const message = expect ? `Expected ${id2} to be a valid id with a prefix \`${expect}\`.` : `Expected ${id2} to be a valid id. Found prefix \`${prefix}\`.`;
    throw new Error(message);
  }
  return prefix;
}
function asId(id2, prefix) {
  return id2;
}
var id = asId;
function assertId(maybeId, prefix, message) {
  if (!validateId(maybeId, prefix)) {
    throw new Error(
      message ?? `Invalid id: ${maybeId}. Expected ${prefix}_{string}`
    );
  }
}

export {
  __export,
  ID_PREFIXES,
  validateIdPrefix,
  validateId,
  getIdPrefix,
  asId,
  id,
  assertId
};
//# sourceMappingURL=chunk-AZRIUYYL.js.map