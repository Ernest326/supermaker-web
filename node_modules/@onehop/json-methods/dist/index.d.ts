declare type AnyMethod = (...args: any[]) => any;
/**
 * SchemaLike is any validation object that has a .parse method
 */
interface SchemaLike<T> {
    /**
     * Parses the input and returns the parsed value. If the input is invalid, it should throw an error.
     * and be caught by the caller. json-methods will not handle errors itself.
     * @param data The data to parse
     */
    parse(data: unknown): T;
}
interface JSONMethodInstance<In, Out> {
    parse(json: string): Out;
    from(data: In): Out;
}
declare function create<T extends object>(schema?: SchemaLike<T>): {
    methods: <M extends object>(methods: M[keyof M] extends AnyMethod ? M & ThisType<T & M> : never) => JSONMethodInstance<T, T & M>;
};
declare type Infer<T> = T extends JSONMethodInstance<unknown, infer Out> ? Out : never;

export { Infer, JSONMethodInstance, SchemaLike, create };
