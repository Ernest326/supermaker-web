import { EventEmitter } from 'eventemitter3';

declare enum OpCode {
    DISPATCH = 0,
    HELLO = 1,
    IDENTIFY = 2,
    HEARTBEAT = 3,
    HEARTBEAT_ACK = 4
}

interface EncapsulatingPayload {
    op: OpCode;
    d?: any;
}
interface EncapsulatingServicePayload {
    c: string | null;
    u?: boolean;
    e: string;
    d: Record<string, any> | null;
}
/**
 * Friendly version of EncapsulatingServicePayload
 */
interface LeapServiceEvent {
    channelId: string | null;
    eventType: string;
    data: Record<string, any> | null;
}

declare const DEFAULT_ENDPOINT = "wss://leap.hop.io/ws";
interface LeapEdgeAuthenticationParameters {
    token?: string | null;
    projectId: string;
}
interface LeapEdgeInitOptions {
    socketUrl: string;
    debug: boolean;
}
declare enum LeapConnectionState {
    IDLE = "idle",
    CONNECTING = "connecting",
    AUTHENTICATING = "authenticating",
    CONNECTED = "connected",
    ERRORED = "errored"
}
declare interface LeapEdgeClient {
    on(event: 'connectionStateUpdate', listener: (state: LeapConnectionState) => void): this;
    on(event: 'serviceEvent', listener: (state: LeapServiceEvent) => void): this;
}
declare class LeapEdgeClient extends EventEmitter {
    auth: LeapEdgeAuthenticationParameters;
    private socket;
    private heartbeat;
    private heartbeatInterval;
    private lastServerHeartbeatAck;
    private connectionState;
    private options;
    constructor(auth: LeapEdgeAuthenticationParameters, opts?: Partial<LeapEdgeInitOptions>);
    /**
     * Connect to Leap Edge
     */
    connect: () => void;
    sendServicePayload: (payload: EncapsulatingServicePayload) => void;
    private sendPayload;
    private encodeSend;
    private _resetState;
    private _handleSocketError;
    private _handleSocketClose;
    private _handleSocketMessage;
    private _handleOpcode;
    private _identify;
    private _setupHeartbeat;
    private _sendHeartbeat;
    private _validateHeartbeatAck;
    private _updateObservedConnectionState;
}

export { DEFAULT_ENDPOINT, EncapsulatingPayload, EncapsulatingServicePayload, LeapConnectionState, LeapEdgeAuthenticationParameters, LeapEdgeClient, LeapEdgeInitOptions, LeapServiceEvent };
