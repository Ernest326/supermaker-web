"use strict";/* Copyright 2022 Hop, Inc */
var __require=(x=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(x,{get:(a,b)=>(typeof require!="undefined"?require:a)[b]}):x)(function(x){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+x+'" is not supported')});var unknownError={description:"Unknown error",reconnect:!0},errorMap={[4001]:{description:"Invalid auth",reconnect:!1},[4002]:{description:"Identify timeout",reconnect:!0},[4003]:{description:"Not authenticated",reconnect:!0},[4004]:{description:"Invalid opcode",reconnect:!0},[4005]:{description:"Invalid payload (doesn't match expected data field)",reconnect:!0},[4006]:{description:"Bad route",reconnect:!0}};import{EventEmitter}from"eventemitter3";var DEFAULT_ENDPOINT="wss://leap.hop.io/ws",LeapConnectionState=(LeapConnectionState2=>(LeapConnectionState2.IDLE="idle",LeapConnectionState2.CONNECTING="connecting",LeapConnectionState2.AUTHENTICATING="authenticating",LeapConnectionState2.CONNECTED="connected",LeapConnectionState2.ERRORED="errored",LeapConnectionState2))(LeapConnectionState||{}),WebSocket=typeof window>"u"?__require("ws"):window.WebSocket,LeapEdgeClient=class extends EventEmitter{constructor(auth,opts){super();this.connect=()=>{if(this.socket){console.warn("[Leap Edge] LeapEdgeClient#connect was called during active connection. This is a noop.");return}this._updateObservedConnectionState("connecting"),this.socket=new WebSocket(this.options.socketUrl),this.socket&&(this.socket.addEventListener("message",this._handleSocketMessage),this.socket.addEventListener("close",this._handleSocketClose),this.socket.addEventListener("error",this._handleSocketError))};this.sendServicePayload=payload=>{if(!this.socket||this.connectionState!=="connected")throw new Error("Attempted to send payload when socket connection was not established or authorized");this.sendPayload(0,payload)};this.sendPayload=(op,d=null)=>{this.encodeSend(d?{op,d}:{op})};this.encodeSend=d=>{!this.socket||!this.socket.OPEN||(this.options.debug&&console.log("send:",d),this.socket.send(JSON.stringify(d)))};this._resetState=()=>{this.heartbeat&&clearInterval(this.heartbeat),this.socket=null,this.heartbeat=null};this._handleSocketError=()=>{this._updateObservedConnectionState("errored"),this.heartbeat&&clearInterval(this.heartbeat),this.socket=null,this.heartbeat=null,this.connect()};this._handleSocketClose=e=>{this._updateObservedConnectionState("errored"),this._resetState();let errorCode=e.code,error=errorMap[errorCode]||unknownError;switch(console.warn("[Leap Edge] Client disconnected unexpectedly:",error),errorCode){case 4006:{this.options.socketUrl=e.reason,this.connect();break}default:{error.reconnect&&this.connect();break}}};this._handleSocketMessage=m=>{let data=JSON.parse(m.data.toString());if(data.op==null){console.warn("leap edge received badly formatted payload:",data);return}this.options.debug&&console.log("recv:",data),this._handleOpcode(data.op,data.d)};this._handleOpcode=(opcode,data)=>{switch(opcode){case 0:{let d=data;d.e==="INIT"&&this._updateObservedConnectionState("connected"),this.emit("serviceEvent",{channelId:d.c,eventType:d.e,data:d.d});break}case 1:{this._updateObservedConnectionState("authenticating"),this._setupHeartbeat(data.heartbeat_interval),this._identify();break}case 3:{this.sendPayload(3,{tag:data.tag});break}case 4:{this.lastServerHeartbeatAck=Date.now();break}}};this._identify=()=>{this.sendPayload(2,{project_id:this.auth.projectId,token:this.auth.token})};this._setupHeartbeat=int=>{this.heartbeatInterval=int,this.heartbeat=setInterval(()=>{this._sendHeartbeat()},int)};this._sendHeartbeat=optimisticResolution=>{this.sendPayload(3);let sendTs=Date.now();setTimeout(()=>this._validateHeartbeatAck(sendTs,optimisticResolution),optimisticResolution?750:5e3)};this._validateHeartbeatAck=(hbtSendTs,or)=>{var _a;let diff=this.lastServerHeartbeatAck&&this.lastServerHeartbeatAck-hbtSendTs;if(!(diff&&diff>=0&&diff<5e3)){if(or){console.log("[Leap Edge] Optimistic resolution failed. Hard reconnecting..."),(_a=this.socket)==null||_a.close(),this._updateObservedConnectionState("errored"),this._resetState(),this.connect();return}console.warn("[Leap Edge] Leap didn't respond to heartbeat in time. Attempting optimistic heartbeat resolution"),this._sendHeartbeat(!0)}};this._updateObservedConnectionState=state=>{this.connectionState=state,this.emit("connectionStateUpdate",state)};this.options={debug:!1,socketUrl:DEFAULT_ENDPOINT,...opts},this.auth=auth,this.socket=null,this.heartbeat=null,this.heartbeatInterval=null,this.lastServerHeartbeatAck=null,this.connectionState="idle"}};export{DEFAULT_ENDPOINT,LeapConnectionState,LeapEdgeClient};
//# sourceMappingURL=index.mjs.map