import { leap } from '@onehop/client';
import { LeapEdgeAuthenticationParameters } from '@onehop/leap-edge-js';
export declare function useLeap(): leap.Client;
export declare function useConnect(): (auth: LeapEdgeAuthenticationParameters) => void;
export declare function useConnectionState(): import("@onehop/leap-edge-js").LeapConnectionState;
/**
 * Initialises Hop's client. This hook should only be rendered
 * at the top level of your app (e.g. so the component only mounts once).
 *
 * Extremely useful for things like Server Side Rendering, as it won't allow
 * hop to connect to leap until we're in the browser.
 *
 * If you want to initialise yourself feel free to copy the hook
 * into your own code. Or, if you're completely client side rendered
 * and don't have a React server rendering step, then you can call
 * hop.init outside of React lifecycle and all @onehop/react hooks will
 * still work exactly as expected.
 *
 * @param params Authentication parameters for leap
 */
export declare function useInit(params?: LeapEdgeAuthenticationParameters): void;
