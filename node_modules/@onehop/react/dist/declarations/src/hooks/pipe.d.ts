import { pipe, util } from '@onehop/client';
import { API } from '@onehop/js';
import { RefObject } from 'react';
export declare type Config = {
    joinToken: string | null;
    ref: RefObject<HTMLVideoElement | null>;
    autojoin?: boolean;
};
export declare const trackedPipeComponents: import("react").Context<util.maps.ObservableMap<string, util.atoms.Atom<number>>>;
export declare function useTrackPipeComponentCount(joinToken: string | null): void;
export declare function usePipeRoom({ ref, autojoin, joinToken }: Config): {
    live: boolean;
    canPlay: boolean;
    subscription: "available" | "pending" | "unavailable" | "non_existent";
    events: util.emitter.HopEmitter<{
        ROOM_UPDATE: API.Pipe.Room;
        BUFFERING: {
            buffering: boolean;
        };
        ESTIMATED_LATENCY: {
            latency: number;
        };
    }>;
    buffering: boolean;
    controls: pipe.Controls | null;
    /**
     * Gets the estimated position (in seconds) of live edge (ie edge of live playlist plus time sync playlist advanced) returns 0 before first playlist is loaded
     */
    getLiveSync(): number | null;
    /**
     * Gets the estimated position (in seconds) of live edge (ie edge of live playlist plus time sync playlist advanced) returns 0 before first playlist is loaded
     */
    getLatency(): number | null;
    /**
     * Requests a subscription to the pipe room. You only need to use this if you don't use the autojoin feature.
     */
    join(): void;
};
