import { API } from '@onehop/js';
import { LeapConnectionState, LeapEdgeAuthenticationParameters, LeapEdgeInitOptions, LeapServiceEvent } from '@onehop/leap-edge-js';
import * as util from '../util';
import { ChannelStateData, RoomStateData } from './types';
import { LeapHandler } from './handlers/create';
import { Subscription } from '../util/types';
export declare type ClientEvents = {
    MESSAGE: {
        event: string;
        data: unknown;
        channel: string | null;
    };
    SERVICE_EVENT: LeapServiceEvent;
    CONNECTION_STATE_UPDATE: LeapConnectionState;
};
export declare class Client extends util.emitter.HopEmitter<ClientEvents> {
    static readonly SUPPORTED_EVENTS: Record<string, LeapHandler>;
    hasPreviouslyConnected: boolean;
    private readonly connectionState;
    private leap;
    private readonly channelStateMap;
    private readonly channelMessageListeners;
    private readonly directMessageListeners;
    private readonly roomStateMap;
    private readonly rawServiceEventListeners;
    constructor();
    connect(auth: LeapEdgeAuthenticationParameters, opts?: LeapEdgeInitOptions): void;
    subscribeToRoom(joinToken: string): void;
    unsubscribeFromRoom(joinToken: API.Pipe.Room['join_token']): void;
    addMessageSubscription<T>(channel: API.Channels.Channel['id'], eventName: string, listener: (data: T) => unknown): Subscription;
    /**
     * Get a list of all subscriptions
     * @returns A list of all channel and room names we are currently subscribed to
     */
    getCurrentAvailableSubscriptions(): {
        channels: string[];
        rooms: string[];
    };
    getChannelStateMap(): util.maps.ObservableMap<string, ChannelStateData<{
        [x: string]: unknown;
    }>>;
    getRoomStateMap(): util.maps.ObservableMap<string, RoomStateData>;
    getChannelMessageListeners(): Map<`${string}:${string}`, Set<(data: unknown) => unknown>>;
    getDirectMessageListeners(): Map<string, Set<(data: unknown) => unknown>>;
    getConnectionState(fullAtom?: false): LeapConnectionState;
    getConnectionState(fullAtom: true): util.atoms.Atom<LeapConnectionState>;
    subscribeToChannel(channel: API.Channels.Channel['id']): ChannelStateData<{
        [x: string]: unknown;
    }> | undefined;
    unsubscribeFromChannel(channel: API.Channels.Channel['id']): void;
    setChannelState(channel: API.Channels.Channel['id'], state: API.Channels.State): void;
    sendMessage(channel: API.Channels.Channel['id'], event: string, payload: unknown): void;
    private handleConnectionStateUpdate;
    private resubscribe;
    private handleServiceEvent;
    private send;
    private getLeap;
}
export declare const instance: Client;
