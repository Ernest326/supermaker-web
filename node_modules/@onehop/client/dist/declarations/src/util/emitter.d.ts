export declare type HopEmitterListener<P extends Record<string, unknown>, Key extends keyof P> = (event: P[Key]) => unknown;
export declare type Unsubscribe = () => void;
export declare class HopEmitter<Payloads extends Record<string, unknown>> {
    private readonly listeners;
    protected constructor();
    createListener<K extends keyof Payloads>(_key: K, fn: HopEmitterListener<Payloads, K>): HopEmitterListener<Payloads, K>;
    /**
     * Subscribe and listen to an event
     * @param key The event name to listen for
     * @param listener A listener for this event
     * @returns A function that can be called to unsubscribe the listener
     * @example
     * ```
     * const unsubscribe = client.on('MESSAGE', console.log);
     * // Unsubscribe later...
     * unsubscribe();
     * ```
     */
    on<K extends keyof Payloads>(key: K, listener: HopEmitterListener<Payloads, K>): Unsubscribe;
    /**
     * Subscribe and listen to an event once only
     * @param key The event name to listen for
     * @param listener A listener for this event
     * @returns A function that can be called to unsubscribe the listener before it even runs
     */
    once<K extends keyof Payloads>(key: K, listener: HopEmitterListener<Payloads, K>): Unsubscribe;
    /**
     * Remove a listener from an event
     * @param key The event name to remove a listener from
     * @param listener The listener to remove
     */
    off<K extends keyof Payloads>(key: K, listener: HopEmitterListener<Payloads, K>): void;
    /**
     * Emit an event to all listeners
     * @param key The event name to emit
     * @param data The data to emit
     */
    emit<K extends keyof Payloads>(key: K, data: Payloads[K]): void;
}
export declare const create: <D extends Record<string, unknown>>() => HopEmitter<D>;
