import { Subscription } from './types';
export declare type ListenerPayload<K, V> = {
    type: 'clear' | 'merge';
} | {
    type: 'set';
    key: K;
    value: V;
} | {
    type: 'delete';
    key: K;
};
export declare type Listener<K, V extends object> = (instance: ObservableMap<K, V>, payload: ListenerPayload<K, V>) => unknown;
export declare class ObservableMap<K, V extends object> implements Map<K, V> {
    private map;
    private readonly listeners;
    get size(): number;
    get [Symbol.toStringTag](): string;
    clear(): void;
    delete(key: K): boolean;
    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void;
    get(key: K): V | undefined;
    has(key: K): boolean;
    set(key: K, value: V): this;
    patch(key: K, value: Partial<V>): this;
    /**
     * Merge with another map, with the new map overwriting members with the same key
     * @param map A map that has a matching set of keys and values
     */
    merge(map: Map<K, V>): void;
    entries(): IterableIterator<[K, V]>;
    keys(): IterableIterator<K>;
    values(): IterableIterator<V>;
    [Symbol.iterator](): IterableIterator<[K, V]>;
    addListener(listener: Listener<K, V>): Subscription;
    removeListener(listener: Listener<K, V>): void;
    private notify;
}
