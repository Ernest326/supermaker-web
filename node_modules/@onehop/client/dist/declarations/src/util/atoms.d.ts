import { Subscription } from '../util/types';
export declare type Listener<T> = (value: T) => unknown;
export declare type AtomValue<T> = {
    uninitialized?: never;
    value: T;
} | {
    uninitialized: true;
    value: undefined;
};
export declare type Atom<T> = {
    get(): T;
    set(value: T): void;
    addListener(listener: Listener<T>): Subscription;
    removeListener(listener: Listener<T>): void;
};
export declare type Infer<T> = T extends Atom<infer V> ? V : never;
/**
 * An atom, inspired much by Jotai, is a single bit of readible
 * state that can be observed and written to. It's useful for
 * React as we can easily update state when the atom changes
 * and use it as a shared global state store.
 *
 * @param initialValue An initial value to assign to the atom
 * @returns A readible and observable state object
 */
declare function atom<T>(initialValue?: T): Atom<T>;
export { atom as create };
